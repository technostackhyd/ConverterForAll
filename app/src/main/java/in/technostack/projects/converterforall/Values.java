package in.technostack.projects.converterforall;

import java.util.ArrayList;

import in.technostack.projects.converterforall.DataModels.CurrencyModel;
import in.technostack.projects.converterforall.DataModels.ValueObject;
public class Values {
    private ArrayList<ArrayList<ValueObject>> values=new ArrayList<>();
    private ArrayList<ArrayList<Double>> values1=new ArrayList<>();

    //Finalized v1.0
    public ArrayList<ArrayList<ValueObject>> createVolumeList(){
        //MilliLitre
        ArrayList<ValueObject> v0=new ArrayList<>();
        v0.add(new ValueObject(1.0,1.0));
        v0.add(new ValueObject(1.0,1.0));
        v0.add(new ValueObject(1.0,0.001));
        v0.add(new ValueObject(1.0,0.000001));
        v0.add(new ValueObject(4.928922,1.0));
        v0.add(new ValueObject(1478677.0,100000.0));
        v0.add(new ValueObject(295735295625000.0,10000000000000.0));
        v0.add(new ValueObject(236588237.0,1000000.0));
        v0.add(new ValueObject(473176473.0,1000000.0));
        v0.add(new ValueObject(946352946.0,1000000.0));
        v0.add(new ValueObject(3785411784.0,1000000.0));
        v0.add(new ValueObject(16387064.0,1000000.0));
        v0.add(new ValueObject(28316846592.0,1000000.0));
        v0.add(new ValueObject(764554857984.0,1000000.0));
        v0.add(new ValueObject(591938802083333.0,100000000000000.0));
        v0.add(new ValueObject(177581640625.0,10000000000.0));
        v0.add(new ValueObject(284130625.0,10000000.0));
        v0.add(new ValueObject(56826125.0,100000.0));
        v0.add(new ValueObject(11365225.0,10000.0));
        v0.add(new ValueObject(454609.0,100.0));
        values.add(v0);
        //CubicCenti
        ArrayList<ValueObject> v1=new ArrayList<>();
        v1.add(new ValueObject(1.0,1.0));
        v1.add(new ValueObject(1.0,1.0));
        v1.add(new ValueObject(1.0,0.001));
        v1.add(new ValueObject(1.0,0.000001));
        v1.add(new ValueObject(4.928922,1.0));
        v1.add(new ValueObject(1478677.0,100000.0));
        v1.add(new ValueObject(295735295625000.0,10000000000000.0));
        v1.add(new ValueObject(236588237.0,1000000.0));
        v1.add(new ValueObject(473176473.0,1000000.0));
        v1.add(new ValueObject(946352946.0,1000000.0));
        v1.add(new ValueObject(3785411784.0,1000000.0));
        v1.add(new ValueObject(16387064.0,1000000.0));
        v1.add(new ValueObject(28316846592.0,1000000.0));
        v1.add(new ValueObject(764554857984.0,1000000.0));
        v1.add(new ValueObject(591938802083333.0,100000000000000.0));
        v1.add(new ValueObject(177581640625.0,10000000000.0));
        v1.add(new ValueObject(284130625.0,10000000.0));
        v1.add(new ValueObject(56826125.0,100000.0));
        v1.add(new ValueObject(11365225.0,10000.0));
        v1.add(new ValueObject(454609.0,100.0));
        values.add(v1);
        //Litres
        ArrayList<ValueObject> v2=new ArrayList<>();
        v2.add(new ValueObject(1.0,1000.0));
        v2.add(new ValueObject(1.0,1000.0));
        v2.add(new ValueObject(1.0,1.0));
        v2.add(new ValueObject(1.0,0.001));
        v2.add(new ValueObject(1000000000000.0,202884119489008.0));
        v2.add(new ValueObject(10000000000000.0,676280444032214.0));
        v2.add(new ValueObject(1000000000000.0,33814022701843.0));
        v2.add(new ValueObject(100000000000000.0,422675282879766.0));
        v2.add(new ValueObject(100000000000000.0,211337641886519.0));
        v2.add(new ValueObject(100000000000000.0,105668820943259.0));
        v2.add(new ValueObject(100000000000000.0,26417205235814.8));
        v2.add(new ValueObject(10000000000000.0,610237440947323.0));
        v2.add(new ValueObject(100000000000000.0,3531466672148.86));
        v2.add(new ValueObject(100000000000000.0,130795061931.439));
        v2.add(new ValueObject(1000000000000.0,168936382693699.0));
        v2.add(new ValueObject(10000000000000.0,563121275645665.0));
        v2.add(new ValueObject(10000000000000.0,351950797278541.0));
        v2.add(new ValueObject(10000000000000.0,17597539863927.0));
        v2.add(new ValueObject(100000000000000.0,87987699319635.1));
        v2.add(new ValueObject(100000000000000.0,21996924829908.8));
        values.add(v2);
        //Cubic Metre
        ArrayList<ValueObject> v3=new ArrayList<>();
        v3.add(new ValueObject(1.0,1000000.0));
        v3.add(new ValueObject(1.0,1000000.0));
        v3.add(new ValueObject(1.0,1000.0));
        v3.add(new ValueObject(1.0,1.0));
        v3.add(new ValueObject(1000000000.0,202884119489008.0));
        v3.add(new ValueObject(10000000000.0,676280444032214.0));
        v3.add(new ValueObject(1000000000.0,33814022701843.0));
        v3.add(new ValueObject(100000000000.0,422675282879766.0));
        v3.add(new ValueObject(100000000000.0,211337641886519.0));
        v3.add(new ValueObject(100000000000.0,105668820943259.0));
        v3.add(new ValueObject(100000000000.0,26417205235814.8));
        v3.add(new ValueObject(10000000000.0,610237440947323.0));
        v3.add(new ValueObject(10000000000000.0,353146667214886.0));
        v3.add(new ValueObject(100000000000000.0,130795061931439.0));
        v3.add(new ValueObject(1000000000.0,168936382693699.0));
        v3.add(new ValueObject(10000000000.0,563121275645665.0));
        v3.add(new ValueObject(10000000000.0,351950797278541.0));
        v3.add(new ValueObject(10000000000.0,17597539863927.0));
        v3.add(new ValueObject(1000000000000.0,879876993196351.0));
        v3.add(new ValueObject(1000000000000.0,219969248299088.0));
        values.add(v3);
        //Teaspoon US
        ArrayList<ValueObject> v4=new ArrayList<>();
        v4.add(new ValueObject(1000000.0,4928922.0));
        v4.add(new ValueObject(1000000.0,4928922.0));
        v4.add(new ValueObject(1000000000.0,4928922.0));
        v4.add(new ValueObject(1000000000000.0,4928922.0));
        v4.add(new ValueObject(1.0,1.0));
        v4.add(new ValueObject(3.0,1.0));
        v4.add(new ValueObject(6.0,1.0));
        v4.add(new ValueObject(48.0,1.0));
        v4.add(new ValueObject(959999920875193.0,10000000000000.01));
        v4.add(new ValueObject(100000000000000.0,520833376261.292));
        v4.add(new ValueObject(100000000000000.0,130208344065.323));
        v4.add(new ValueObject(100000000000000.0,30078127479089.6));
        v4.add(new ValueObject(100000000000000.0,17406323772.6213));
        v4.add(new ValueObject(155116039163127.0,1000000000.0));
        v4.add(new ValueObject(120094982652055.0,100000000000000.0));
        v4.add(new ValueObject(360284947956166.0,100000000000000.0));
        v4.add(new ValueObject(576455916729865.0,100000000000000.0));
        v4.add(new ValueObject(115291183345973.0,1000000000000.0));
        v4.add(new ValueObject(230582366691946.0,1000000000000.0));
        v4.add(new ValueObject(922329466767784.0,1000000000000.0));
        values.add(v4);
        //Tablespoon US
        ArrayList<ValueObject> v5=new ArrayList<>();
        v5.add(new ValueObject(1000000.0,14786765.0));
        v5.add(new ValueObject(1000000.0,14786765.0));
        v5.add(new ValueObject(1000000000.0,14786765.0));
        v5.add(new ValueObject(1000000000000.0,14786765.0));
        v5.add(new ValueObject(100000000000000.0,299999979711588.0));
        v5.add(new ValueObject(1.0,1.0));
        v5.add(new ValueObject(100000000000000.0,50000000739681.8));
        v5.add(new ValueObject(100000000000000.0,6250000079251.62));
        v5.add(new ValueObject(100000000000000.0,3125000046230.11));
        v5.add(new ValueObject(100000000000000.0,1562500023115.05));
        v5.add(new ValueObject(255999996212830.0,1000000000000.0));
        v5.add(new ValueObject(100000000000000.0,90234376334894.4));
        v5.add(new ValueObject(100000000000000.0,52218967786.3972));
        v5.add(new ValueObject(100000000000000.0,1934035843.94064));
        v5.add(new ValueObject(100000000000000.0,249802259084180.0));
        v5.add(new ValueObject(100000000000000.0,83267419694726.7));
        v5.add(new ValueObject(100000000000000.0,52042137309204.2));
        v5.add(new ValueObject(100000000000000.0,2602106865460.21));
        v5.add(new ValueObject(100000000000000.0,1301053432730.1));
        v5.add(new ValueObject(100000000000000.0,325263358182.526));
        values.add(v5);
        //Fluid ounces
        ArrayList<ValueObject> v6=new ArrayList<>();
        v6.add(new ValueObject(100000000000.0,2957352956250.0));
        v6.add(new ValueObject(100000000000.0,2957352956250.0));
        v6.add(new ValueObject(10000000000000.0,295735295625.0));
        v6.add(new ValueObject(10000000000000.0,295735295.625));
        v6.add(new ValueObject(100000000000000.0,599999950546996.0));
        v6.add(new ValueObject(100000000000000.0,199999997041273.0));
        v6.add(new ValueObject(1.0,1.0));
        v6.add(new ValueObject(100000000000000.0,12499999973582.8));
        v6.add(new ValueObject(100000000000000.0,6250000000000.0));
        v6.add(new ValueObject(100000000000000.0,3125000000000.0));
        v6.add(new ValueObject(100000000000000.0,781250000000.0));
        v6.add(new ValueObject(100000000000000.0,180468750000000.0));
        v6.add(new ValueObject(100000000000000.0,104437934027.778));
        v6.add(new ValueObject(100000000000000.0,3868071630.65844));
        v6.add(new ValueObject(100000000000000.0,499604510777393.0));
        v6.add(new ValueObject(100000000000000.0,166534836925798.0));
        v6.add(new ValueObject(100000000000000.0,104084273078624.0));
        v6.add(new ValueObject(100000000000000.0,5204213653931.18));
        v6.add(new ValueObject(100000000000000.0,2602106826965.59));
        v6.add(new ValueObject(100000000000000.0,650526706741.397));
        values.add(v6);
        //CupsUS
        ArrayList<ValueObject> v7=new ArrayList<>();
        v7.add(new ValueObject(1000000.0,236588237.0));
        v7.add(new ValueObject(1000000.0,236588237.0));
        v7.add(new ValueObject(1000000.0,236588.2));
        v7.add(new ValueObject(1000000.0,236.5882));
        v7.add(new ValueObject(10000000000000.0,479999961452017.0));
        v7.add(new ValueObject(10000000000000.0,159999997971159.0));
        v7.add(new ValueObject(10000000000000.0,80000000169070.1));
        v7.add(new ValueObject(1.0,1.0));
        v7.add(new ValueObject(10000000000000.0,5000000010566.88));
        v7.add(new ValueObject(10000000000000.0,2500000005283.44));
        v7.add(new ValueObject(10000000000000.0,625000001320.86));
        v7.add(new ValueObject(10000000000000.0,144375000305119.0));
        v7.add(new ValueObject(10000000000000.0,83550347398.7955));
        v7.add(new ValueObject(10000000000000.0,3094457311.0665));
        v7.add(new ValueObject(10000000000000.0,399683609466597.0));
        v7.add(new ValueObject(10000000000000.0,133227869822199.0));
        v7.add(new ValueObject(10000000000000.0,83267418638874.3));
        v7.add(new ValueObject(10000000000000.0,4163370931943.71));
        v7.add(new ValueObject(10000000000000.0,2081685465971.86));
        v7.add(new ValueObject(10000000000000.0,520421366492.964));
        values.add(v7);
        //Pints US
        ArrayList<ValueObject> v8=new ArrayList<>();
        v8.add(new ValueObject(1000000.0,473176473.0));
        v8.add(new ValueObject(1000000.0,473176473.0));
        v8.add(new ValueObject(1000000000.0,473176473.0));
        v8.add(new ValueObject(1000000000000.0,473176473.0));
        v8.add(new ValueObject(10000000000000.0,959999920875193.0));
        v8.add(new ValueObject(10000000000000.0,319999995266037.0));
        v8.add(new ValueObject(1.0,16.0));
        v8.add(new ValueObject(10000000000000.0,19999999957732.5));
        v8.add(new ValueObject(1.0,1.0));
        v8.add(new ValueObject(1.0,0.5));
        v8.add(new ValueObject(1.0,0.125));
        v8.add(new ValueObject(1.0,28.875));
        v8.add(new ValueObject(100000000000000.0,1671006944444.44));
        v8.add(new ValueObject(100000000000000.0,61889146090.535));
        v8.add(new ValueObject(10000000000000.0,799367217243829.0));
        v8.add(new ValueObject(10000000000000.0,266455739081276.0));
        v8.add(new ValueObject(10000000000000.0,166534836925798.0));
        v8.add(new ValueObject(10000000000000.0,8326741846289.89));
        v8.add(new ValueObject(10000000000000.0,4163370923144.94));
        v8.add(new ValueObject(10000000000000.0,1040842730786.24));
        values.add(v8);
        //Quarts US
        ArrayList<ValueObject> v9=new ArrayList<>();
        v9.add(new ValueObject(1000000.0,946352946.0));
        v9.add(new ValueObject(1000000.0,946352946.0));
        v9.add(new ValueObject(1000000000.0,946352946.0));
        v9.add(new ValueObject(1000000000000.0,946352946.0));
        v9.add(new ValueObject(1000000000000.0,191999984175039.0));
        v9.add(new ValueObject(10000000000000.0,639999990532074.0));
        v9.add(new ValueObject(1.0,32.0));
        v9.add(new ValueObject(100000000000000.0,399999999154649.0));
        v9.add(new ValueObject(1.0,2.0));
        v9.add(new ValueObject(1.0,1.0));
        v9.add(new ValueObject(1.0,0.25));
        v9.add(new ValueObject(1.0,57.75));
        v9.add(new ValueObject(100000000000000.0,3342013888888.89));
        v9.add(new ValueObject(100000000000000.0,123778292181.07));
        v9.add(new ValueObject(1000000000000.0,159873443448766.0));
        v9.add(new ValueObject(10000000000000.0,532911478162553.0));
        v9.add(new ValueObject(10000000000000.0,333069673851596.0));
        v9.add(new ValueObject(10000000000000.0,16653483692579.8));
        v9.add(new ValueObject(10000000000000.0,8326741846289.89));
        v9.add(new ValueObject(10000000000000.0,2081685461572.47));
        values.add(v9);
        //Gallons US
        ArrayList<ValueObject> v10=new ArrayList<>();
        v10.add(new ValueObject(1000000.0,3785411784.0));
        v10.add(new ValueObject(1000000.0,3785411784.0));
        v10.add(new ValueObject(1000000000.0,3785411784.0));
        v10.add(new ValueObject(1000000000000.0,3785411784.0));
        v10.add(new ValueObject(1000000000000.0,767999936700155.0));
        v10.add(new ValueObject(1000000000000.0,255999996212830.0));
        v10.add(new ValueObject(1.0,128.0));
        v10.add(new ValueObject(1000000000000.0,15999999966186.0));
        v10.add(new ValueObject(1.0,8.0));
        v10.add(new ValueObject(1.0,4.0));
        v10.add(new ValueObject(1.0,1.0));
        v10.add(new ValueObject(1.0,231.0));
        v10.add(new ValueObject(1000000000000.0,133680555555.556));
        v10.add(new ValueObject(100000000000000.0,495113168724.28));
        v10.add(new ValueObject(1000000000000.0,639493773795064.0));
        v10.add(new ValueObject(1000000000000.0,213164591265021.0));
        v10.add(new ValueObject(1000000000000.0,133227869540638.0));
        v10.add(new ValueObject(1000000000000.0,6661393477031.91));
        v10.add(new ValueObject(1000000000000.0,3330696738515.96));
        v10.add(new ValueObject(1000000000000.0,832674184628.989));
        values.add(v10);
        //Cubic inches
        ArrayList<ValueObject> v11=new ArrayList<>();
        v11.add(new ValueObject(1000000000000.0,16387064000000.0));
        v11.add(new ValueObject(1000000000000.0,16387064000000.0));
        v11.add(new ValueObject(1000000000000.0,16387064000.0));
        v11.add(new ValueObject(1000000000000.0,16387064.0));
        v11.add(new ValueObject(1000000000000.0,3324675050650.02));
        v11.add(new ValueObject(1000000000000.0,1108225091830.43));
        v11.add(new ValueObject(1000000000000.0,554112554112.554));
        v11.add(new ValueObject(1000000000000.0,69264069117.6882));
        v11.add(new ValueObject(1000000000000.0,34632034632.0346));
        v11.add(new ValueObject(1000000000000.0,17316017316.0173));
        v11.add(new ValueObject(1000000000000.0,4329004329.00433));
        v11.add(new ValueObject(1.0,1.0));
        v11.add(new ValueObject(1000000000000.0,578703703.703704));
        v11.add(new ValueObject(1000000000000.0,21433470.5075446));
        v11.add(new ValueObject(1000000000000.0,2768371315130.15));
        v11.add(new ValueObject(1000000000000.0,922790438376.715));
        v11.add(new ValueObject(1000000000000.0,576744023985.447));
        v11.add(new ValueObject(1000000000000.0,28837201199.2723));
        v11.add(new ValueObject(1000000000000.0,14418600599.6362));
        v11.add(new ValueObject(1000000000000.0,3604650149.90904));
        values.add(v11);
        //Cubic feet
        ArrayList<ValueObject> v12=new ArrayList<>();
        v12.add(new ValueObject(1000000.0,28316846592.0));
        v12.add(new ValueObject(1000000.0,28316846592.0));
        v12.add(new ValueObject(100000000000.0,2831684659200.0));
        v12.add(new ValueObject(100000000000.0,2831684659.2));
        v12.add(new ValueObject(100000000000.0,574503848752324.0));
        v12.add(new ValueObject(100000000000.0,191501295868298.0));
        v12.add(new ValueObject(100000000000.0,95750649350649.4));
        v12.add(new ValueObject(100000000000.0,11968831143536.5));
        v12.add(new ValueObject(100000000000.0,5984415584415.58));
        v12.add(new ValueObject(100000000000.0,2992207792207.79));
        v12.add(new ValueObject(100000000000.0,748051948051.948));
        v12.add(new ValueObject(1.0,1728.0));
        v12.add(new ValueObject(1.0,1.0));
        v12.add(new ValueObject(100000000000.0,3703703703.7037));
        v12.add(new ValueObject(100000000000.0,478374563254489.0));
        v12.add(new ValueObject(100000000000.0,159458187751496.0));
        v12.add(new ValueObject(100000000000.0,99661367344685.2));
        v12.add(new ValueObject(100000000000.0,4983068367234.26));
        v12.add(new ValueObject(100000000000.0,2491534183617.13));
        v12.add(new ValueObject(100000000000.0,622883545904.283));
        values.add(v12);
        //Cubic yards
        ArrayList<ValueObject> v13=new ArrayList<>();
        v13.add(new ValueObject(1000000.0,764554857984.0));
        v13.add(new ValueObject(1000000.0,764554857984.0));
        v13.add(new ValueObject(1000000000.0,764554857984.0));
        v13.add(new ValueObject(10000000000000.0,7645548579840.0));
        v13.add(new ValueObject(1000000000.0,155116039163127.0));
        v13.add(new ValueObject(10000000000.0,517053498844406.0));
        v13.add(new ValueObject(10000000000.0,258526753246753.0));
        v13.add(new ValueObject(10000000000.0,32315844087548.6));
        v13.add(new ValueObject(10000000000.0,16157922077922.1));
        v13.add(new ValueObject(10000000000.0,8078961038961.04));
        v13.add(new ValueObject(10000000000.0,2019740259740.26));
        v13.add(new ValueObject(1.0,46656.0));
        v13.add(new ValueObject(1.0,27.0));
        v13.add(new ValueObject(1.0,1.0));
        v13.add(new ValueObject(1000000000.0,129161132078712.0));
        v13.add(new ValueObject(1000000000.0,43053710692904.0));
        v13.add(new ValueObject(1000000000.0,26908569183065.0));
        v13.add(new ValueObject(1000000000.0,1345428459153.25));
        v13.add(new ValueObject(1000000000.0,672714229576.625));
        v13.add(new ValueObject(1000000000.0,168178557394.156));
        values.add(v13);
        //Teaspoons UK
        ArrayList<ValueObject> v14=new ArrayList<>();
        v14.add(new ValueObject(100000000000000.0,591938802083333.0));
        v14.add(new ValueObject(100000000000000.0,591938802083333.0));
        v14.add(new ValueObject(100000000000000.0,591938802083.333));
        v14.add(new ValueObject(100000000000000.0,591938802.083333));
        v14.add(new ValueObject(100000000000000.0,120094982652055.0));
        v14.add(new ValueObject(100000000000000.0,40031663591281.3));
        v14.add(new ValueObject(100000000000000.0,20015832091747.6));
        v14.add(new ValueObject(100000000000000.0,2501979006180.82));
        v14.add(new ValueObject(100000000000000.0,1250989505734.22));
        v14.add(new ValueObject(100000000000000.0,625494752867.112));
        v14.add(new ValueObject(100000000000000.0,156373688216.778));
        v14.add(new ValueObject(100000000000000.0,36122321978075.7));
        v14.add(new ValueObject(100000000000000.0,20904121515.0901));
        v14.add(new ValueObject(100000000000000.0,774226722.781115));
        v14.add(new ValueObject(1.0,1.0));
        v14.add(new ValueObject(3.0,1.0));
        v14.add(new ValueObject(4.8,1.0));
        v14.add(new ValueObject(96.0,1.0));
        v14.add(new ValueObject(192.0,1.0));
        v14.add(new ValueObject(768.0,1.0));
        values.add(v14);
        //Tablespoon UK
        ArrayList<ValueObject> v15=new ArrayList<>();
        v15.add(new ValueObject(10000000000.0,177581640625.0));
        v15.add(new ValueObject(10000000000.0,177581640625.0));
        v15.add(new ValueObject(10000000000.0,177581640.625));
        v15.add(new ValueObject(10000000000.0,177581.640625));
        v15.add(new ValueObject(100000000000000.0,360284947956166.0));
        v15.add(new ValueObject(100000000000000.0,120094990773844.0));
        v15.add(new ValueObject(100000000000000.0,60047496275242.8));
        v15.add(new ValueObject(100000000000000.0,7505937018542.47));
        v15.add(new ValueObject(100000000000000.0,3752968517202.67));
        v15.add(new ValueObject(100000000000000.0,1876484258601.34));
        v15.add(new ValueObject(100000000000000.0,469121064650.334));
        v15.add(new ValueObject(100000000000000.0,108366965934227.0));
        v15.add(new ValueObject(100000000000000.0,62712364545.2703));
        v15.add(new ValueObject(100000000000000.0,2322680168.34335));
        v15.add(new ValueObject(1.0,3.0));
        v15.add(new ValueObject(1.0,1.0));
        v15.add(new ValueObject(1.0,0.625));
        v15.add(new ValueObject(1.0,0.03125));
        v15.add(new ValueObject(1.0,0.015625));
        v15.add(new ValueObject(1.0,0.00390625));
        values.add(v15);
        //Fluid ounces UK
        ArrayList<ValueObject> v16=new ArrayList<>();
        v16.add(new ValueObject(10000000.0,284130625.0));
        v16.add(new ValueObject(10000000.0,284130625.0));
        v16.add(new ValueObject(100000000000000.0,2841306250000.0));
        v16.add(new ValueObject(100000000000000.0,2841306250.0));
        v16.add(new ValueObject(100000000000000.0,576455916729865.0));
        v16.add(new ValueObject(100000000000000.0,192151985238150.0));
        v16.add(new ValueObject(100000000000000.0,96075994040388.4));
        v16.add(new ValueObject(100000000000000.0,12009499229668.0));
        v16.add(new ValueObject(100000000000000.0,6004749627524.27));
        v16.add(new ValueObject(100000000000000.0,3002374813762.14));
        v16.add(new ValueObject(100000000000000.0,750593703440.534));
        v16.add(new ValueObject(100000000000000.0,173387145494763.0));
        v16.add(new ValueObject(100000000000000.0,100339783272.433));
        v16.add(new ValueObject(100000000000000.0,3716288269.34935));
        v16.add(new ValueObject(1.0,4.8));
        v16.add(new ValueObject(1.0,1.6));
        v16.add(new ValueObject(1.0,1.0));
        v16.add(new ValueObject(1.0,0.05));
        v16.add(new ValueObject(1.0,0.025));
        v16.add(new ValueObject(1.0,0.00625));
        values.add(v16);
        //Pints UK
        ArrayList<ValueObject> v17=new ArrayList<>();
        v17.add(new ValueObject(1000000000000.0,568261250000000.0));
        v17.add(new ValueObject(1000000000000.0,568261250000000.0));
        v17.add(new ValueObject(1000000000000.0,568261250000.0));
        v17.add(new ValueObject(1000000000000.0,568261250.0));
        v17.add(new ValueObject(1000000000000.0,115291183345973.0));
        v17.add(new ValueObject(1000000000000.0,38430397047630.1));
        v17.add(new ValueObject(1000000000000.0,19215198808077.7));
        v17.add(new ValueObject(1000000000000.0,2401899845933.59));
        v17.add(new ValueObject(1000000000000.0,1200949925504.85));
        v17.add(new ValueObject(1000000000000.0,600474962752.427));
        v17.add(new ValueObject(1000000000000.0,150118740688.107));
        v17.add(new ValueObject(1000000000000.0,34677429098952.7));
        v17.add(new ValueObject(1000000000000.0,20067956654.4865));
        v17.add(new ValueObject(1000000000000.0,743257653.869871));
        v17.add(new ValueObject(1.0,96.0));
        v17.add(new ValueObject(1.0,32.0));
        v17.add(new ValueObject(1.0,20.0));
        v17.add(new ValueObject(1.0,1.0));
        v17.add(new ValueObject(1.0,0.5));
        v17.add(new ValueObject(1.0,0.125));
        values.add(v17);
        //Quarts UK
        ArrayList<ValueObject> v18=new ArrayList<>();
        v18.add(new ValueObject(100000000000.0,113652250000000.0));
        v18.add(new ValueObject(100000000000.0,113652250000000.0));
        v18.add(new ValueObject(100000000000.0,113652250000.0));
        v18.add(new ValueObject(100000000000.0,113652250.0));
        v18.add(new ValueObject(100000000000.0,23058236669194.6));
        v18.add(new ValueObject(100000000000.0,7686079409526.02));
        v18.add(new ValueObject(100000000000.0,3843039761615.54));
        v18.add(new ValueObject(100000000000.0,480379969186.718));
        v18.add(new ValueObject(100000000000.0,240189985100.971));
        v18.add(new ValueObject(100000000000.0,120094992550.486));
        v18.add(new ValueObject(100000000000.0,30023748137.6214));
        v18.add(new ValueObject(100000000000.0,6935485819790.54));
        v18.add(new ValueObject(100000000000.0,4013591330.8973));
        v18.add(new ValueObject(100000000000.0,148651530.773974));
        v18.add(new ValueObject(1.0,192.0));
        v18.add(new ValueObject(1.0,64.0));
        v18.add(new ValueObject(1.0,40.0));
        v18.add(new ValueObject(1.0,2.0));
        v18.add(new ValueObject(1.0,1.0));
        v18.add(new ValueObject(1.0,0.25));
        values.add(v18);
        //Gallons UK
        ArrayList<ValueObject> v19=new ArrayList<>();
        v19.add(new ValueObject(100.0,454609.0));
        v19.add(new ValueObject(100.0,454609.0));
        v19.add(new ValueObject(100.0,454.609));
        v19.add(new ValueObject(100.0,0.454609));
        v19.add(new ValueObject(1000000000000.0,922329466767784.0));
        v19.add(new ValueObject(1000000000000.0,307443176381041.0));
        v19.add(new ValueObject(1000000000000.0,153721590464621.0));
        v19.add(new ValueObject(1000000000000.0,19215198767468.7));
        v19.add(new ValueObject(1000000000000.0,9607599404038.84));
        v19.add(new ValueObject(1000000000000.0,4803799702019.42));
        v19.add(new ValueObject(1000000000000.0,1200949925504.85));
        v19.add(new ValueObject(1000000000000.0,277419432791622.0));
        v19.add(new ValueObject(1000000000000.0,160543653235.892));
        v19.add(new ValueObject(1000000000000.0,5946061230.95897));
        v19.add(new ValueObject(1.0,768.0));
        v19.add(new ValueObject(1.0,256.0));
        v19.add(new ValueObject(1.0,160.0));
        v19.add(new ValueObject(1.0,8.0));
        v19.add(new ValueObject(1.0,4.0));
        v19.add(new ValueObject(1.0,1.0));
        values.add(v19);
        return values;
    }

    //Finalized v1.0
    public ArrayList<ArrayList<ValueObject>> createAreaList(){

//Square Millimeters
        ArrayList<ValueObject> v0=new ArrayList<>();
        v0.add(new ValueObject(1.0,1.0));
        v0.add(new ValueObject(1.0,0.01));
        v0.add(new ValueObject(1.0,0.000001));
        v0.add(new ValueObject(1.0,0.0000000001));
        v0.add(new ValueObject(1.0,0.000000000001));
        v0.add(new ValueObject(645.16,1.0));
        v0.add(new ValueObject(92903.04,1.0));
        v0.add(new ValueObject(83612736.0,100.0));
        v0.add(new ValueObject(40468564224.0,10.0));
        v0.add(new ValueObject(2589988110336.0,1.0));
        values.add(v0);
//Square centimeters
        ArrayList<ValueObject> v1=new ArrayList<>();
        v1.add(new ValueObject(1.0,100.0));
        v1.add(new ValueObject(1.0,1.0));
        v1.add(new ValueObject(1.0,0.0001));
        v1.add(new ValueObject(1.0,0.00000001));
        v1.add(new ValueObject(1.0,0.0000000001));
        v1.add(new ValueObject(6.4516,1.0));
        v1.add(new ValueObject(9290304.0,10000.0));
        v1.add(new ValueObject(83612736.0,10000.0));
        v1.add(new ValueObject(40468564224.0,1000.0));
        v1.add(new ValueObject(2589988110336.0,100.0));
        values.add(v1);
//Square Meters
        ArrayList<ValueObject> v2=new ArrayList<>();
        v2.add(new ValueObject(1.0,1000000.0));
        v2.add(new ValueObject(1.0,10000.0));
        v2.add(new ValueObject(1.0,1.0));
        v2.add(new ValueObject(1.0,0.0001));
        v2.add(new ValueObject(1.0,0.000001));
        v2.add(new ValueObject(0.64516,1000.0));
        v2.add(new ValueObject(9290304.0,100000000.0));
        v2.add(new ValueObject(83612736.0,100000000.0));
        v2.add(new ValueObject(40468564224.0,10000000.0));
        v2.add(new ValueObject(2589988110336.0,1000000.0));
        values.add(v2);
//Hectares
        ArrayList<ValueObject> v3=new ArrayList<>();
        v3.add(new ValueObject(1.0,10000000000.0));
        v3.add(new ValueObject(1.0,100000000.0));
        v3.add(new ValueObject(1.0,10000.0));
        v3.add(new ValueObject(1.0,1.0));
        v3.add(new ValueObject(1.0,0.01));
        v3.add(new ValueObject(1.0,15500031.0));
        v3.add(new ValueObject(9290304.0,1000000000000.0));
        v3.add(new ValueObject(83612736.0,1000000000000.0));
        v3.add(new ValueObject(40468564224.0,100000000000.0));
        v3.add(new ValueObject(25899881103360.0,100000000000.0));
        values.add(v3);
//Square Kilometers
        ArrayList<ValueObject> v4=new ArrayList<>();
        v4.add(new ValueObject(1.0,1000000000000.0));
        v4.add(new ValueObject(1.0,10000000000.0));
        v4.add(new ValueObject(1.0,1000000.0));
        v4.add(new ValueObject(1.0,100.0));
        v4.add(new ValueObject(1.0,1.0));
        v4.add(new ValueObject(64516.0,100000000000000.0));
        v4.add(new ValueObject(9290304.0,100000000000000.0));
        v4.add(new ValueObject(83612736.0,100000000000000.0));
        v4.add(new ValueObject(40468564224.0,10000000000000.0));
        v4.add(new ValueObject(258998811033600.0,100000000000000.0));
        values.add(v4);
//Square Inches
        ArrayList<ValueObject> v5=new ArrayList<>();
        v5.add(new ValueObject(1.0,645.16));
        v5.add(new ValueObject(1.0,6.4516));
        v5.add(new ValueObject(1.0,0.00064516));
        v5.add(new ValueObject(1.0,0.000000064516));
        v5.add(new ValueObject(1.0,0.00000000064516));
        v5.add(new ValueObject(1.0,1.0));
        v5.add(new ValueObject(144.0,1.0));
        v5.add(new ValueObject(1296.0,1.0));
        v5.add(new ValueObject(6272640.0,1.0));
        v5.add(new ValueObject(4014489600.0,1.0));
        values.add(v5);
//Square Feet
        ArrayList<ValueObject> v6=new ArrayList<>();
        v6.add(new ValueObject(1.0,92903.04));
        v6.add(new ValueObject(1.0,929.0304));
        v6.add(new ValueObject(1.0,0.09290304));
        v6.add(new ValueObject(1.0,0.000009290304));
        v6.add(new ValueObject(1.0,0.00000009290304));
        v6.add(new ValueObject(1.0,144.0));
        v6.add(new ValueObject(1.0,1.0));
        v6.add(new ValueObject(9.0,1.0));
        v6.add(new ValueObject(43560.0,1.0));
        v6.add(new ValueObject(27878400.0,1.0));
        values.add(v6);
//Square yards
        ArrayList<ValueObject> v7=new ArrayList<>();
        v7.add(new ValueObject(100.0,83612736.0));
        v7.add(new ValueObject(10000.0,83612736.0));
        v7.add(new ValueObject(100000000.0,83612736.0));
        v7.add(new ValueObject(1000000000000.0,83612736.0));
        v7.add(new ValueObject(100000000000000.0,83612736.0));
        v7.add(new ValueObject(1.0,1296.0));
        v7.add(new ValueObject(1.0,9.0));
        v7.add(new ValueObject(1.0,1.0));
        v7.add(new ValueObject(4840.0,1.0));
        v7.add(new ValueObject(3097600.0,1.0));
        values.add(v7);
//Title
        ArrayList<ValueObject> v8=new ArrayList<>();
        v8.add(new ValueObject(10.0,40468564224.0));
        v8.add(new ValueObject(1000.0,40468564224.0));
        v8.add(new ValueObject(10000000.0,40468564224.0));
        v8.add(new ValueObject(100000000000.0,40468564224.0));
        v8.add(new ValueObject(10000000000000.0,40468564224.0));
        v8.add(new ValueObject(1.0,6272640.0));
        v8.add(new ValueObject(1.0,43560.0));
        v8.add(new ValueObject(1.0,4840.0));
        v8.add(new ValueObject(1.0,1.0));
        v8.add(new ValueObject(640.0,1.0));
        values.add(v8);
//Title
        ArrayList<ValueObject> v9=new ArrayList<>();
        v9.add(new ValueObject(1.0,2589988110336.0));
        v9.add(new ValueObject(100.0,2589988110336.0));
        v9.add(new ValueObject(1000000.0,2589988110336.0));
        v9.add(new ValueObject(10000000000.0,2589988110336.0));
        v9.add(new ValueObject(1000000000000.0,2589988110336.0));
        v9.add(new ValueObject(1.0,4014489600.0));
        v9.add(new ValueObject(1.0,27878400.0));
        v9.add(new ValueObject(1.0,3097600.0));
        v9.add(new ValueObject(1.0,640.0));
        v9.add(new ValueObject(1.0,1.0));
        values.add(v9);
        return values;
    }

    //Finalized v1.0
    public ArrayList<ArrayList<ValueObject>> createLengthList(){

//nano Metre
        ArrayList<ValueObject> v0=new ArrayList<>();
        v0.add(new ValueObject(1.0,1.0));
        v0.add(new ValueObject(1.0,0.001));
        v0.add(new ValueObject(1.0,0.000001));
        v0.add(new ValueObject(1.0,0.0000001));
        v0.add(new ValueObject(1.0,0.000000001));
        v0.add(new ValueObject(1.0,0.000000000001));
        v0.add(new ValueObject(25400000.0,1.0));
        v0.add(new ValueObject(304800000.0,1.0));
        v0.add(new ValueObject(914400000.0,1.0));
        v0.add(new ValueObject(1609344000000.0,1.0));
        v0.add(new ValueObject(1852000000000.0,1.0));
        values.add(v0);
//Microns
        ArrayList<ValueObject> v1=new ArrayList<>();
        v1.add(new ValueObject(1.0,1000.0));
        v1.add(new ValueObject(1.0,1.0));
        v1.add(new ValueObject(1.0,0.001));
        v1.add(new ValueObject(1.0,0.0001));
        v1.add(new ValueObject(1.0,0.000001));
        v1.add(new ValueObject(1.0,0.000000001));
        v1.add(new ValueObject(25400.0,1.0));
        v1.add(new ValueObject(304800.0,1.0));
        v1.add(new ValueObject(914400.0,1.0));
        v1.add(new ValueObject(1609344000.0,1.0));
        v1.add(new ValueObject(1852000000.0,1.0));
        values.add(v1);
//Millimetre
        ArrayList<ValueObject> v2=new ArrayList<>();
        v2.add(new ValueObject(1.0,1000000.0));
        v2.add(new ValueObject(1.0,1000.0));
        v2.add(new ValueObject(1.0,1.0));
        v2.add(new ValueObject(1.0,0.1));
        v2.add(new ValueObject(1.0,0.001));
        v2.add(new ValueObject(1.0,0.000001));
        v2.add(new ValueObject(25.4,1.0));
        v2.add(new ValueObject(304.8,1.0));
        v2.add(new ValueObject(914.4,1.0));
        v2.add(new ValueObject(1609344.0,1.0));
        v2.add(new ValueObject(1852000.0,1.0));
        values.add(v2);
//Title
        ArrayList<ValueObject> v3=new ArrayList<>();
        v3.add(new ValueObject(1.0,10000000.0));
        v3.add(new ValueObject(1.0,10000.0));
        v3.add(new ValueObject(1.0,10.0));
        v3.add(new ValueObject(1.0,1.0));
        v3.add(new ValueObject(1.0,0.01));
        v3.add(new ValueObject(1.0,0.00001));
        v3.add(new ValueObject(2.54,1.0));
        v3.add(new ValueObject(30.48,1.0));
        v3.add(new ValueObject(91.44,1.0));
        v3.add(new ValueObject(160934.4,1.0));
        v3.add(new ValueObject(185200.0,1.0));
        values.add(v3);
//Metres
        ArrayList<ValueObject> v4=new ArrayList<>();
        v4.add(new ValueObject(1.0,1000000000.0));
        v4.add(new ValueObject(1.0,1000000.0));
        v4.add(new ValueObject(1.0,1000.0));
        v4.add(new ValueObject(1.0,100.0));
        v4.add(new ValueObject(1.0,1.0));
        v4.add(new ValueObject(1.0,0.001));
        v4.add(new ValueObject(0.0254,1.0));
        v4.add(new ValueObject(0.3048,1.0));
        v4.add(new ValueObject(0.9144,1.0));
        v4.add(new ValueObject(1609.344,1.0));
        v4.add(new ValueObject(1852.0,1.0));
        values.add(v4);
//KiloMetres
        ArrayList<ValueObject> v5=new ArrayList<>();
        v5.add(new ValueObject(1.0,1000000000000.0));
        v5.add(new ValueObject(1.0,1000000000.0));
        v5.add(new ValueObject(1.0,1000000.0));
        v5.add(new ValueObject(1.0,100000.0));
        v5.add(new ValueObject(1.0,1000.0));
        v5.add(new ValueObject(1.0,1.0));
        v5.add(new ValueObject(1.0,39370.08));
        v5.add(new ValueObject(1.0,3280.84));
        v5.add(new ValueObject(1.0,1093.613));
        v5.add(new ValueObject(1.0,0.621371));
        v5.add(new ValueObject(1852.0,1000.0));
        values.add(v5);
//Inches
        ArrayList<ValueObject> v6=new ArrayList<>();
        v6.add(new ValueObject(1.0,25400000.0));
        v6.add(new ValueObject(1.0,25400.0));
        v6.add(new ValueObject(1.0,25.4));
        v6.add(new ValueObject(1.0,2.54));
        v6.add(new ValueObject(1.0,0.0254));
        v6.add(new ValueObject(1.0,0.000025));
        v6.add(new ValueObject(1.0,1.0));
        v6.add(new ValueObject(12.0,1.0));
        v6.add(new ValueObject(36.0,1.0));
        v6.add(new ValueObject(63360.0,1.0));
        v6.add(new ValueObject(729133858267717.0,10000000000.0));
        values.add(v6);
//Feet
        ArrayList<ValueObject> v7=new ArrayList<>();
        v7.add(new ValueObject(1.0,304800000.0));
        v7.add(new ValueObject(1.0,304800.0));
        v7.add(new ValueObject(1.0,304.8));
        v7.add(new ValueObject(1.0,30.48));
        v7.add(new ValueObject(1.0,0.3048));
        v7.add(new ValueObject(3280.84,1.0));
        v7.add(new ValueObject(1.0,12.0));
        v7.add(new ValueObject(1.0,1.0));
        v7.add(new ValueObject(3.0,1.0));
        v7.add(new ValueObject(5280.0,1.0));
        v7.add(new ValueObject(607611548556431.0,100000000000.0));
        values.add(v7);
//Yards
        ArrayList<ValueObject> v8=new ArrayList<>();
        v8.add(new ValueObject(1.0,914400000.0));
        v8.add(new ValueObject(1.0,914400.0));
        v8.add(new ValueObject(1.0,914.4));
        v8.add(new ValueObject(1.0,91.44));
        v8.add(new ValueObject(1.0,0.9144));
        v8.add(new ValueObject(1.0,0.0009144));
        v8.add(new ValueObject(1.0,36.0));
        v8.add(new ValueObject(1.0,3.0));
        v8.add(new ValueObject(1.0,1.0));
        v8.add(new ValueObject(1760.0,1.0));
        v8.add(new ValueObject(202537182852143.0,100000000000.0));
        values.add(v8);
//Miles
        ArrayList<ValueObject> v9=new ArrayList<>();
        v9.add(new ValueObject(1.0,1609344000000.0));
        v9.add(new ValueObject(1.0,1609344000.0));
        v9.add(new ValueObject(1.0,1609344.0));
        v9.add(new ValueObject(1.0,160934.4));
        v9.add(new ValueObject(1.0,1609.344));
        v9.add(new ValueObject(1.0,1.609344));
        v9.add(new ValueObject(1.0,63360.0));
        v9.add(new ValueObject(1.0,5280.0));
        v9.add(new ValueObject(1.0,1760.0));
        v9.add(new ValueObject(1.0,1.0));
        v9.add(new ValueObject(115077944802354.0,100000000000000.0));
        values.add(v9);
//nautical Miles
        ArrayList<ValueObject> v10=new ArrayList<>();
        v10.add(new ValueObject(1.0,1852000000000.0));
        v10.add(new ValueObject(1.0,1852000000.0));
        v10.add(new ValueObject(1.0,1852000.0));
        v10.add(new ValueObject(1.0,185200.0));
        v10.add(new ValueObject(1.0,1852.0));
        v10.add(new ValueObject(1.0,1.852));
        v10.add(new ValueObject(10000000000.0,729133858267717.0));
        v10.add(new ValueObject(100000000000.0,607611548556431.0));
        v10.add(new ValueObject(100000000000.0,202537182852143.0));
        v10.add(new ValueObject(100000000000000.0,115077944802354.0));
        v10.add(new ValueObject(1.0,1.0));
        values.add(v10);
        return values;
    }

    //
    public ArrayList<ArrayList<ValueObject>> createEnergyList(){

//Title
        ArrayList<ValueObject> v0=new ArrayList<>();
        v0.add(new ValueObject(1.0,1.0));
        v0.add(new ValueObject(1.0,1.602177e-19));
        v0.add(new ValueObject(1.0,1.602177e-22));
        v0.add(new ValueObject(1.0,3.829294e-20));
        v0.add(new ValueObject(1.0,3.829294e-23));
        v0.add(new ValueObject(1.0,1.181705e-19));
        v0.add(new ValueObject(1.0,1.518570e-22));
        values.add(v0);
//Title
        ArrayList<ValueObject> v1=new ArrayList<>();
        v1.add(new ValueObject(1.0,6.241509e+18));
        v1.add(new ValueObject(1.0,1.0));
        v1.add(new ValueObject(1.0,0.001));
        v1.add(new ValueObject(1.0,0.239006));
        v1.add(new ValueObject(1.0,0.000239));
        v1.add(new ValueObject(1.0,0.737562));
        v1.add(new ValueObject(1.0,0.000948));
        values.add(v1);
//Title
        ArrayList<ValueObject> v2=new ArrayList<>();
        v2.add(new ValueObject(1.0,6.241509e+21));
        v2.add(new ValueObject(1.0,1000.0));
        v2.add(new ValueObject(1.0,1.0));
        v2.add(new ValueObject(1.0,239.0057));
        v2.add(new ValueObject(1.0,0.239006));
        v2.add(new ValueObject(1.0,737.5621));
        v2.add(new ValueObject(1.0,0.947817));
        values.add(v2);
//Title
        ArrayList<ValueObject> v3=new ArrayList<>();
        v3.add(new ValueObject(1.0,2.611448e+19));
        v3.add(new ValueObject(1.0,4.184));
        v3.add(new ValueObject(1.0,0.004184));
        v3.add(new ValueObject(1.0,1.0));
        v3.add(new ValueObject(1.0,0.001));
        v3.add(new ValueObject(1.0,3.08596));
        v3.add(new ValueObject(1.0,0.003966));
        values.add(v3);
//Title
        ArrayList<ValueObject> v4=new ArrayList<>();
        v4.add(new ValueObject(1.0,2.611448e+22));
        v4.add(new ValueObject(1.0,4184.0));
        v4.add(new ValueObject(1.0,4.184));
        v4.add(new ValueObject(1.0,1000.0));
        v4.add(new ValueObject(1.0,1.0));
        v4.add(new ValueObject(1.0,3085.96));
        v4.add(new ValueObject(1.0,3.965666));
        values.add(v4);
//Title
        ArrayList<ValueObject> v5=new ArrayList<>();
        v5.add(new ValueObject(1.0,8.462350e+18));
        v5.add(new ValueObject(1.0,1.355818));
        v5.add(new ValueObject(1.0,0.001356));
        v5.add(new ValueObject(1.0,0.324048));
        v5.add(new ValueObject(1.0,0.000324));
        v5.add(new ValueObject(1.0,1.0));
        v5.add(new ValueObject(1.0,0.001285));
        values.add(v5);
//Title
        ArrayList<ValueObject> v6=new ArrayList<>();
        v6.add(new ValueObject(1.0,6.585142e+21));
        v6.add(new ValueObject(1.0,1055.056));
        v6.add(new ValueObject(1.0,1.055056));
        v6.add(new ValueObject(1.0,252.1644));
        v6.add(new ValueObject(1.0,0.252164));
        v6.add(new ValueObject(1.0,778.1694));
        v6.add(new ValueObject(1.0,1.0));
        values.add(v6);
        return values;
    }

    //Finalized v1.0
    public ArrayList<ArrayList<ValueObject>> createTimeList(){

//Title
        ArrayList<ValueObject> v0=new ArrayList<>();
        v0.add(new ValueObject(1.0,1.0));
        v0.add(new ValueObject(1.0,0.001));
        v0.add(new ValueObject(1.0,0.000001));
        v0.add(new ValueObject(60000000.0,1.0));
        v0.add(new ValueObject(3600000000.0,1.0));
        v0.add(new ValueObject(86400000000.0,1.0));
        v0.add(new ValueObject(604800000000.0,1.0));
        v0.add(new ValueObject(31557600000000.0,1.0));
        values.add(v0);
//Title
        ArrayList<ValueObject> v1=new ArrayList<>();
        v1.add(new ValueObject(1.0,1000.0));
        v1.add(new ValueObject(1.0,1.0));
        v1.add(new ValueObject(1.0,0.001));
        v1.add(new ValueObject(60000.0,1.0));
        v1.add(new ValueObject(3600000.0,1.0));
        v1.add(new ValueObject(86400000.0,1.0));
        v1.add(new ValueObject(604800000.0,1.0));
        v1.add(new ValueObject(31557600000.0,1.0));
        values.add(v1);
//Title
        ArrayList<ValueObject> v2=new ArrayList<>();
        v2.add(new ValueObject(1.0,1000000.0));
        v2.add(new ValueObject(1.0,1000.0));
        v2.add(new ValueObject(1.0,1.0));
        v2.add(new ValueObject(60.0,1.0));
        v2.add(new ValueObject(3600.0,1.0));
        v2.add(new ValueObject(86400.0,1.0));
        v2.add(new ValueObject(604800.0,1.0));
        v2.add(new ValueObject(31557600.0,1.0));
        values.add(v2);
//Title
        ArrayList<ValueObject> v3=new ArrayList<>();
        v3.add(new ValueObject(1.0,60000000.0));
        v3.add(new ValueObject(1.0,60000.0));
        v3.add(new ValueObject(1.0,60.0));
        v3.add(new ValueObject(1.0,1.0));
        v3.add(new ValueObject(60.0,1.0));
        v3.add(new ValueObject(1440.0,1.0));
        v3.add(new ValueObject(10080.0,1.0));
        v3.add(new ValueObject(525960.0,1.0));
        values.add(v3);
//Hour
        ArrayList<ValueObject> v4=new ArrayList<>();
        v4.add(new ValueObject(1.0,3600000000.0));
        v4.add(new ValueObject(1.0,3600000.0));
        v4.add(new ValueObject(1.0,3600.0));
        v4.add(new ValueObject(1.0,60.0));
        v4.add(new ValueObject(1.0,1.0));
        v4.add(new ValueObject(24.0,1.0));
        v4.add(new ValueObject(168.0,1.0));
        v4.add(new ValueObject(8766.0,1.0));
        values.add(v4);
//Days
        ArrayList<ValueObject> v5=new ArrayList<>();
        v5.add(new ValueObject(1.0,86400000000.0));
        v5.add(new ValueObject(1.0,86400000.0));
        v5.add(new ValueObject(1.0,86400.0));
        v5.add(new ValueObject(1.0,1440.0));
        v5.add(new ValueObject(1.0,24.0));
        v5.add(new ValueObject(1.0,1.0));
        v5.add(new ValueObject(7.0,1.0));
        v5.add(new ValueObject(365.25,1.0));
        values.add(v5);
//Weeks
        ArrayList<ValueObject> v6=new ArrayList<>();
        v6.add(new ValueObject(1.0,604800000000.0));
        v6.add(new ValueObject(1.0,604800000.0));
        v6.add(new ValueObject(1.0,604800.0));
        v6.add(new ValueObject(1.0,10080.0));
        v6.add(new ValueObject(1.0,168.0));
        v6.add(new ValueObject(1.0,7.0));
        v6.add(new ValueObject(1.0,1.0));
        v6.add(new ValueObject(52.17857,1.0));
        values.add(v6);
//Years
        ArrayList<ValueObject> v7=new ArrayList<>();
        v7.add(new ValueObject(1.0,31557600000000.0));
        v7.add(new ValueObject(1.0,31557600000.0));
        v7.add(new ValueObject(1.0,31557600.0));
        v7.add(new ValueObject(1.0,525960.0));
        v7.add(new ValueObject(1.0,8766.0));
        v7.add(new ValueObject(1.0,365.25));
        v7.add(new ValueObject(1.0,52.17857));
        v7.add(new ValueObject(1.0,1.0));
        values.add(v7);
        return values;
    }

    //Finalized v1.0
    public ArrayList<ArrayList<ValueObject>> createPowerList(){

//Title
        ArrayList<ValueObject> v0=new ArrayList<>();
        v0.add(new ValueObject(1.0,1.0));
        v0.add(new ValueObject(1.0,0.001));
        v0.add(new ValueObject(1.0,0.001341));
        v0.add(new ValueObject(1.0,44.25373));
        v0.add(new ValueObject(1.0,0.056869));
        values.add(v0);
//Title
        ArrayList<ValueObject> v1=new ArrayList<>();
        v1.add(new ValueObject(1.0,1000.0));
        v1.add(new ValueObject(1.0,1.0));
        v1.add(new ValueObject(1.0,1.341022));
        v1.add(new ValueObject(1.0,44253.73));
        v1.add(new ValueObject(1.0,56.86902));
        values.add(v1);
//Title
        ArrayList<ValueObject> v2=new ArrayList<>();
        v2.add(new ValueObject(1.0,745.6999));
        v2.add(new ValueObject(1.0,0.7457));
        v2.add(new ValueObject(1.0,1.0));
        v2.add(new ValueObject(1.0,33000.0));
        v2.add(new ValueObject(1.0,42.40722));
        values.add(v2);
//Title
        ArrayList<ValueObject> v3=new ArrayList<>();
        v3.add(new ValueObject(1.0,0.022597));
        v3.add(new ValueObject(1.0,0.000023));
        v3.add(new ValueObject(1.0,0.00003));
        v3.add(new ValueObject(1.0,1.0));
        v3.add(new ValueObject(1.0,0.001285));
        values.add(v3);
//Title
        ArrayList<ValueObject> v4=new ArrayList<>();
        v4.add(new ValueObject(1.0,17.58427));
        v4.add(new ValueObject(1.0,0.017584));
        v4.add(new ValueObject(1.0,0.023581));
        v4.add(new ValueObject(1.0,778.1694));
        v4.add(new ValueObject(1.0,1.0));
        values.add(v4);
        return values;
    }

    //Finalizedv1.0
    /*public ArrayList<ArrayList<ValueObject>> createPressureList(){

//Atm
        ArrayList<ValueObject> v0=new ArrayList<>();
        v0.add(new ValueObject(1.0,1.0));
        v0.add(new ValueObject(1.0,1.01325));
        v0.add(new ValueObject(1.0,101.325));
        v0.add(new ValueObject(1000000000000.0,760127531882997.0));
        v0.add(new ValueObject(1.0,101325.0));
        v0.add(new ValueObject(10000000000000.0,146959494003922.0));
        values.add(v0);
//Bars
        ArrayList<ValueObject> v1=new ArrayList<>();
        v1.add(new ValueObject(1.01325,1.0));
        v1.add(new ValueObject(1.0,1.0));
        v1.add(new ValueObject(1.0,100.0));
        v1.add(new ValueObject(1000000000000.0,750187546886747.0));
        v1.add(new ValueObject(1.0,100000.0));
        v1.add(new ValueObject(6894757.0,100000000.0));
        values.add(v1);
//Kilopascals
        ArrayList<ValueObject> v2=new ArrayList<>();
        v2.add(new ValueObject(101.325,1.0));
        v2.add(new ValueObject(1.0,0.01));
        v2.add(new ValueObject(1.0,1.0));
        v2.add(new ValueObject(100000000000000.0,750187546886745.0));
        v2.add(new ValueObject(1.0,1000.0));
        v2.add(new ValueObject(689475700000002.0,100000000000000.0));
        values.add(v2);
//Millimetres of mercury
        ArrayList<ValueObject> v3=new ArrayList<>();
        v3.add(new ValueObject(760127531882997.0,1000000000000.0));
        v3.add(new ValueObject(750187546886747.0,1000000000000.0));
        v3.add(new ValueObject(750187546886745.0,100000000000000.0));
        v3.add(new ValueObject(1.0,1.0));
        v3.add(new ValueObject(1000000000000.0,133299999999995.0));
        v3.add(new ValueObject(517236084021023.0,10000000000000.0));
        values.add(v3);
//Pascals
        ArrayList<ValueObject> v4=new ArrayList<>();
        v4.add(new ValueObject(101325.0,1.0));
        v4.add(new ValueObject(1.0,0.00001));
        v4.add(new ValueObject(1.0,0.001));
        v4.add(new ValueObject(100000000000000.0,750187546886.747));
        v4.add(new ValueObject(1.0,1.0));
        v4.add(new ValueObject(6894757.0,1000.0));
        values.add(v4);
//Pounds per square Inch
        ArrayList<ValueObject> v5=new ArrayList<>();
        v5.add(new ValueObject(146959494003922.0,10000000000000.0));
        v5.add(new ValueObject(100000000.0,6894757.0));
        v5.add(new ValueObject(100000000000000.0,689475700000002.0));
        v5.add(new ValueObject(10000000000000.0,517236084021023.0));
        v5.add(new ValueObject(1000.0,6894757.0));
        v5.add(new ValueObject(1.0,1.0));
        values.add(v5);
        return values;
    }*/
    public ArrayList<ArrayList<Double>> createPressureList(){

//Atm
        ArrayList<Double> v0=new ArrayList<>();
        v0.add(1e+18);
        v0.add(1.0);
        v0.add(1000.0);
        v0.add(1000000.0);
        v0.add(1000000000.0);
        v0.add(1e+12);
        v0.add(1e+15);
        v0.add(1e+16);
        v0.add(1e+17);
        v0.add(1e+19);
        v0.add(1e+20);
        v0.add(1e+21);
        v0.add(1e+24);
        v0.add(1e+27);
        v0.add(1e+30);
        v0.add(1e+33);
        v0.add(1e+36);
        v0.add(1000000000000000000.0);
        v0.add(1e+14);
        v0.add(1e+12);
        v0.add(1e+15);
        v0.add(1e+13);
        v0.add(1e+16);
        v0.add(1e+19);
        v0.add(1e+19);
        v0.add(1.019716213e+17);
        v0.add(1.019716213e+13);
        v0.add(1.019716213e+11);
        v0.add(1.019716213e+16);
        v0.add(1.044271712e+13);
        v0.add(7.251886887e+10);
        v0.add(9.323854568e+12);
        v0.add(6.474899006e+10);
        v0.add(1.450377377e+11);
        v0.add(1.450377377e+11);
        v0.add(2.088543423e+16);
        v0.add(1.450377377e+14);
        v0.add(1.450377377e+14);
        v0.add(6.719689751e+17);
        v0.add(7.500616827e+15);
        v0.add(7.500637554e+14);
        v0.add(7.500637554e+15);
        v0.add(2.953005865e+14);
        v0.add(2.96133971e+14);
        v0.add(1.019744289e+16);
        v0.add(1.019744289e+17);
        v0.add(4.014742133e+15);
        v0.add(3.345622922e+14);
        v0.add(4.018598072e+15);
        v0.add(3.348831727e+14);
        v0.add(1.019716213e+13);
        v0.add(9.869232667e+12);
        values1.add(v0);
        return values1;
    }

    //Finalizedv1.0
    public ArrayList<ArrayList<ValueObject>> createSpeedList(){

//Cm/second
        ArrayList<ValueObject> v0=new ArrayList<>();
        v0.add(new ValueObject(1.0,1.0));
        v0.add(new ValueObject(1.0,0.01));
        v0.add(new ValueObject(1.0,0.036));
        v0.add(new ValueObject(30.48,1.0));
        v0.add(new ValueObject(44.7,1.0));
        v0.add(new ValueObject(51.44,1.0));
        v0.add(new ValueObject(34030.0,1.0));
        values.add(v0);
//m/s
        ArrayList<ValueObject> v1=new ArrayList<>();
        v1.add(new ValueObject(1.0,100.0));
        v1.add(new ValueObject(1.0,1.0));
        v1.add(new ValueObject(1.0,3.6));
        v1.add(new ValueObject(0.3048,1.0));
        v1.add(new ValueObject(0.447,1.0));
        v1.add(new ValueObject(0.5144,1.0));
        v1.add(new ValueObject(340.3,1.0));
        values.add(v1);
//km/hr
        ArrayList<ValueObject> v2=new ArrayList<>();
        v2.add(new ValueObject(0.036,1.0));
        v2.add(new ValueObject(3.6,1.0));
        v2.add(new ValueObject(1.0,1.0));
        v2.add(new ValueObject(1.09728,1.0));
        v2.add(new ValueObject(1.6092,1.0));
        v2.add(new ValueObject(1.85184,1.0));
        v2.add(new ValueObject(1225.08,1.0));
        values.add(v2);
//ft/s
        ArrayList<ValueObject> v3=new ArrayList<>();
        v3.add(new ValueObject(1.0,30.48));
        v3.add(new ValueObject(1.0,0.3048));
        v3.add(new ValueObject(1.0,1.09728));
        v3.add(new ValueObject(1.0,1.0));
        v3.add(new ValueObject(146653543307087.0,100000000000000.0));
        v3.add(new ValueObject(100000000000000.0,59253499222395.0));
        v3.add(new ValueObject(111646981627297.0,100000000000.0));
        values.add(v3);
//mile/hr
        ArrayList<ValueObject> v4=new ArrayList<>();
        v4.add(new ValueObject(1.0,44.7));
        v4.add(new ValueObject(1.0,0.447));
        v4.add(new ValueObject(1.0,1.6092));
        v4.add(new ValueObject(100000000000000.0,146653543307087.0));
        v4.add(new ValueObject(1.0,1.0));
        v4.add(new ValueObject(100000000000000.0,86897356143079.3));
        v4.add(new ValueObject(100000000000000.0,131354687040.846));
        values.add(v4);
//knot
        ArrayList<ValueObject> v5=new ArrayList<>();
        v5.add(new ValueObject(1.0,51.44));
        v5.add(new ValueObject(1.0,0.5144));
        v5.add(new ValueObject(1.0,1.85184));
        v5.add(new ValueObject(100000000000000.0,168766404199475.0));
        v5.add(new ValueObject(100000000000000.0,115078299776286.0));
        v5.add(new ValueObject(1.0,1.0));
        v5.add(new ValueObject(661547433903577.0,1000000000000.0));
        values.add(v5);
//mach
        ArrayList<ValueObject> v6=new ArrayList<>();
        v6.add(new ValueObject(1.0,34030.0));
        v6.add(new ValueObject(1.0,340.3));
        v6.add(new ValueObject(1.0,1225.08));
        v6.add(new ValueObject(100000000000.0,111646981627297.0));
        v6.add(new ValueObject(1000000000000.0,761297539149888.0));
        v6.add(new ValueObject(1000000000000.0,661547433903577.0));
        v6.add(new ValueObject(1.0,1.0));
        values.add(v6);
        return values;
    }

    //Finalized v1.0
    public ArrayList<ArrayList<ValueObject>> createWeightList(){

//Carats
        ArrayList<ValueObject> v0=new ArrayList<>();
        v0.add(new ValueObject(1.0,1.0));
        v0.add(new ValueObject(1.0,200.0));
        v0.add(new ValueObject(1.0,20.0));
        v0.add(new ValueObject(1.0,2.0));
        v0.add(new ValueObject(1.0,0.2));
        v0.add(new ValueObject(1.0,0.02));
        v0.add(new ValueObject(1.0,0.002));
        v0.add(new ValueObject(1.0,0.0002));
        v0.add(new ValueObject(1.0,0.0000002));
        v0.add(new ValueObject(141747615625.0,1000000000.0));
        v0.add(new ValueObject(226796185.0,100000.0));
        v0.add(new ValueObject(317514659.0,10000.0));
        v0.add(new ValueObject(45359237.0,10.0));
        v0.add(new ValueObject(5080234544.0,1000.0));
        values.add(v0);
//Milli Grams
        ArrayList<ValueObject> v1=new ArrayList<>();
        v1.add(new ValueObject(1.0,0.005));
        v1.add(new ValueObject(1.0,1.0));
        v1.add(new ValueObject(1.0,0.1));
        v1.add(new ValueObject(1.0,0.01));
        v1.add(new ValueObject(1.0,0.001));
        v1.add(new ValueObject(1.0,0.0001));
        v1.add(new ValueObject(1.0,0.00001));
        v1.add(new ValueObject(1.0,0.000001));
        v1.add(new ValueObject(1.0,0.000000001));
        v1.add(new ValueObject(28349523125.0,1000000.0));
        v1.add(new ValueObject(45359237.0,100.0));
        v1.add(new ValueObject(635029318.0,100.0));
        v1.add(new ValueObject(907184740.0,1.0));
        v1.add(new ValueObject(10160469088.0,10.0));
        values.add(v1);
//CentiGrams
        ArrayList<ValueObject> v2=new ArrayList<>();
        v2.add(new ValueObject(1.0,0.05));
        v2.add(new ValueObject(1.0,10.0));
        v2.add(new ValueObject(1.0,1.0));
        v2.add(new ValueObject(1.0,0.1));
        v2.add(new ValueObject(1.0,0.01));
        v2.add(new ValueObject(1.0,0.001));
        v2.add(new ValueObject(1.0,0.0001));
        v2.add(new ValueObject(1.0,0.00001));
        v2.add(new ValueObject(1.0,0.00000001));
        v2.add(new ValueObject(28349523125.0,10000000.0));
        v2.add(new ValueObject(45359237.0,1000.0));
        v2.add(new ValueObject(635029318.0,1000.0));
        v2.add(new ValueObject(90718474.0,1.0));
        v2.add(new ValueObject(10160469088.0,100.0));
        values.add(v2);
//Decigrams
        ArrayList<ValueObject> v3=new ArrayList<>();
        v3.add(new ValueObject(1.0,0.5));
        v3.add(new ValueObject(1.0,100.0));
        v3.add(new ValueObject(1.0,10.0));
        v3.add(new ValueObject(1.0,1.0));
        v3.add(new ValueObject(1.0,0.1));
        v3.add(new ValueObject(1.0,0.01));
        v3.add(new ValueObject(1.0,0.001));
        v3.add(new ValueObject(1.0,0.0001));
        v3.add(new ValueObject(1.0,0.0000001));
        v3.add(new ValueObject(28349523125.0,100000000.0));
        v3.add(new ValueObject(45359237.0,10000.0));
        v3.add(new ValueObject(635029318.0,10000.0));
        v3.add(new ValueObject(90718474.0,10.0));
        v3.add(new ValueObject(10160469088.0,1000.0));
        values.add(v3);
//Grams
        ArrayList<ValueObject> v4=new ArrayList<>();
        v4.add(new ValueObject(1.0,5.0));
        v4.add(new ValueObject(1.0,1000.0));
        v4.add(new ValueObject(1.0,100.0));
        v4.add(new ValueObject(1.0,10.0));
        v4.add(new ValueObject(1.0,1.0));
        v4.add(new ValueObject(1.0,0.1));
        v4.add(new ValueObject(1.0,0.01));
        v4.add(new ValueObject(1.0,0.001));
        v4.add(new ValueObject(1.0,0.000001));
        v4.add(new ValueObject(28349523125.0,1000000000.0));
        v4.add(new ValueObject(45359237.0,100000.0));
        v4.add(new ValueObject(635029318.0,100000.0));
        v4.add(new ValueObject(90718474.0,100.0));
        v4.add(new ValueObject(10160469088.0,10000.0));
        values.add(v4);
//Decagrams
        ArrayList<ValueObject> v5=new ArrayList<>();
        v5.add(new ValueObject(1.0,50.0));
        v5.add(new ValueObject(1.0,10000.0));
        v5.add(new ValueObject(1.0,1000.0));
        v5.add(new ValueObject(1.0,100.0));
        v5.add(new ValueObject(1.0,10.0));
        v5.add(new ValueObject(1.0,1.0));
        v5.add(new ValueObject(1.0,0.1));
        v5.add(new ValueObject(1.0,0.01));
        v5.add(new ValueObject(1.0,0.00001));
        v5.add(new ValueObject(28349523125.0,10000000000.0));
        v5.add(new ValueObject(45359237.0,1000000.0));
        v5.add(new ValueObject(635029318.0,1000000.0));
        v5.add(new ValueObject(90718474.0,1000.0));
        v5.add(new ValueObject(10160469088.0,100000.0));
        values.add(v5);
//Hectograms
        ArrayList<ValueObject> v6=new ArrayList<>();
        v6.add(new ValueObject(1.0,500.0));
        v6.add(new ValueObject(1.0,100000.0));
        v6.add(new ValueObject(1.0,10000.0));
        v6.add(new ValueObject(1.0,1000.0));
        v6.add(new ValueObject(1.0,100.0));
        v6.add(new ValueObject(1.0,10.0));
        v6.add(new ValueObject(1.0,1.0));
        v6.add(new ValueObject(1.0,0.1));
        v6.add(new ValueObject(1.0,0.0001));
        v6.add(new ValueObject(28349523125.0,100000000000.0));
        v6.add(new ValueObject(45359237.0,10000000.0));
        v6.add(new ValueObject(635029318.0,10000000.0));
        v6.add(new ValueObject(90718474.0,10000.0));
        v6.add(new ValueObject(10160469088.0,1000000.0));
        values.add(v6);
//Kg
        ArrayList<ValueObject> v7=new ArrayList<>();
        v7.add(new ValueObject(1.0,5000.0));
        v7.add(new ValueObject(1.0,1000000.0));
        v7.add(new ValueObject(1.0,100000.0));
        v7.add(new ValueObject(1.0,10000.0));
        v7.add(new ValueObject(1.0,1000.0));
        v7.add(new ValueObject(1.0,100.0));
        v7.add(new ValueObject(1.0,10.0));
        v7.add(new ValueObject(1.0,1.0));
        v7.add(new ValueObject(1.0,0.001));
        v7.add(new ValueObject(28349523125.0,1000000000000.0));
        v7.add(new ValueObject(45359237.0,100000000.0));
        v7.add(new ValueObject(635029318.0,100000000.0));
        v7.add(new ValueObject(90718474.0,100000.0));
        v7.add(new ValueObject(10160469088.0,10000000.0));
        values.add(v7);
//Metric Tonnes
        ArrayList<ValueObject> v8=new ArrayList<>();
        v8.add(new ValueObject(1.0,5000000.0));
        v8.add(new ValueObject(1.0,1000000000.0));
        v8.add(new ValueObject(1.0,100000000.0));
        v8.add(new ValueObject(1.0,10000000.0));
        v8.add(new ValueObject(1.0,1000000.0));
        v8.add(new ValueObject(1.0,100000.0));
        v8.add(new ValueObject(1.0,10000.0));
        v8.add(new ValueObject(1.0,1000.0));
        v8.add(new ValueObject(1.0,1.0));
        v8.add(new ValueObject(2834952312.5,100000000000000.0));
        v8.add(new ValueObject(45359237.0,100000000000.0));
        v8.add(new ValueObject(635029318.0,100000000000.0));
        v8.add(new ValueObject(90718474.0,100000000.0));
        v8.add(new ValueObject(10160469088.0,10000000000.0));
        values.add(v8);
//Ounces
        ArrayList<ValueObject> v9=new ArrayList<>();
        v9.add(new ValueObject(1000000000.0,141747615625.0));
        v9.add(new ValueObject(1000000000.0,28349523125000.0));
        v9.add(new ValueObject(1000000000.0,2834952312500.0));
        v9.add(new ValueObject(1000000000.0,283495231250.0));
        v9.add(new ValueObject(1000000000.0,28349523125.0));
        v9.add(new ValueObject(1000000000.0,2834952312.5));
        v9.add(new ValueObject(1000000000.0,283495231.25));
        v9.add(new ValueObject(1000000000.0,28349523.125));
        v9.add(new ValueObject(1000000000.0,28349.523125));
        v9.add(new ValueObject(1.0,1.0));
        v9.add(new ValueObject(1.0,0.0625));
        v9.add(new ValueObject(224.0,1.0));
        v9.add(new ValueObject(32000.0,1.0));
        v9.add(new ValueObject(35840.0,1.0));
        values.add(v9);
//Pounds
        ArrayList<ValueObject> v10=new ArrayList<>();
        v10.add(new ValueObject(100000.0,226796185.0));
        v10.add(new ValueObject(100000.0,45359237000.0));
        v10.add(new ValueObject(100000.0,4535923700.0));
        v10.add(new ValueObject(100000.0,453592370.0));
        v10.add(new ValueObject(100000.0,45359237.0));
        v10.add(new ValueObject(1000000000.0,45359237000.0));
        v10.add(new ValueObject(1000000000.0,4535923700.0));
        v10.add(new ValueObject(1000000000.0,453592370.0));
        v10.add(new ValueObject(1000000000.0,453592.37));
        v10.add(new ValueObject(1.0,16.0));
        v10.add(new ValueObject(1.0,1.0));
        v10.add(new ValueObject(14.0,1.0));
        v10.add(new ValueObject(2000.0,1.0));
        v10.add(new ValueObject(2240.0,1.0));
        values.add(v10);
//Stone
        ArrayList<ValueObject> v11=new ArrayList<>();
        v11.add(new ValueObject(10000.0,317514659.0));
        v11.add(new ValueObject(1000000.0,6350293180000.0));
        v11.add(new ValueObject(1000000.0,635029318000.0));
        v11.add(new ValueObject(1000000.0,63502931800.0));
        v11.add(new ValueObject(1000000.0,6350293180.0));
        v11.add(new ValueObject(1000000.0,635029318.0));
        v11.add(new ValueObject(1000000000.0,63502931800.0));
        v11.add(new ValueObject(1000000000.0,6350293180.0));
        v11.add(new ValueObject(1000000000.0,6350293.18));
        v11.add(new ValueObject(1.0,224.0));
        v11.add(new ValueObject(1.0,14.0));
        v11.add(new ValueObject(1.0,1.0));
        v11.add(new ValueObject(1.0,0.007));
        v11.add(new ValueObject(1.0,0.00625));
        values.add(v11);
//Short ton us
        ArrayList<ValueObject> v12=new ArrayList<>();
        v12.add(new ValueObject(10.0,45359237.0));
        v12.add(new ValueObject(1.0,907184740.0));
        v12.add(new ValueObject(1.0,90718474.0));
        v12.add(new ValueObject(1.0,9071847.4));
        v12.add(new ValueObject(1.0,907184.74));
        v12.add(new ValueObject(1.0,90718.474));
        v12.add(new ValueObject(1.0,9071.8474));
        v12.add(new ValueObject(1.0,907.18474));
        v12.add(new ValueObject(1.0,0.90718474));
        v12.add(new ValueObject(1.0,32000.0));
        v12.add(new ValueObject(1.0,2000.0));
        v12.add(new ValueObject(0.007,1.0));
        v12.add(new ValueObject(1.0,1.0));
        v12.add(new ValueObject(1.12,1.0));
        values.add(v12);
//Long Ton US
        ArrayList<ValueObject> v13=new ArrayList<>();
        v13.add(new ValueObject(1000.0,5080234544.0));
        v13.add(new ValueObject(10.0,10160469088.0));
        v13.add(new ValueObject(1000000.0,101604690880000.0));
        v13.add(new ValueObject(1000000.0,10160469088000.0));
        v13.add(new ValueObject(1000000.0,1016046908800.0));
        v13.add(new ValueObject(1000000.0,101604690880.0));
        v13.add(new ValueObject(1000000.0,10160469088.0));
        v13.add(new ValueObject(10000000.0,10160469088.0));
        v13.add(new ValueObject(10000000.0,10160469.088));
        v13.add(new ValueObject(1.0,35840.0));
        v13.add(new ValueObject(1.0,2240.0));
        v13.add(new ValueObject(1.0,160.0));
        v13.add(new ValueObject(1.0,1.12));
        v13.add(new ValueObject(1.0,1.0));
        values.add(v13);
        return values;
    }

    public ArrayList<ArrayList<Double>> createDensityList(){
        ArrayList<Double> v0=new ArrayList<>();
        v0.add(1000000000000.0);
        v0.add(1000000.0);
        v0.add(1e+15);
        v0.add(1000000000.0);
        v0.add(1000000.0);
        v0.add(1e+18);
        v0.add(1e+12);
        v0.add(1000000000.0);
        v0.add(0.000001);
        v0.add(0.001);
        v0.add(1.0);
        v0.add(1000.0);
        v0.add(1000000.0);
        v0.add(1000000000.0);
        v0.add(1e+10);
        v0.add(1e+11);
        v0.add(1e+12);
        v0.add(1e+13);
        v0.add(1e+14);
        v0.add(1e+15);
        v0.add(1e+18);
        v0.add(1e+21);
        v0.add(1e+24);
        v0.add(1e+27);
        v0.add(1e+30);
        v0.add(36127292.0001);
        v0.add(6.242796058e+10);
        v0.add(1.685554936e+12);
        v0.add(8345404452.0315);
        v0.add(1.002241285e+10);
        v0.add(578036672.0016);
        v0.add(9.988473692e+11);
        v0.add(1.335264712e+11);
        v0.add(1.603586057e+11);
        v0.add(5.841783116e+13);
        v0.add(7.015688998e+13);
        v0.add(4.36995724e+14);
        v0.add(842777467.77833);
        v0.add(752479881.9446);
        v0.add(1940320331.9797);
        v0.add(4.33527504e+11);
        v0.add(181225081.55129);
        values1.add(v0);
        return values1;

    }

    public ArrayList<ArrayList<Double>> createDataList() {

        //Bits
        ArrayList<Double> v0=new ArrayList<>();
        v0.add(1.0);
        v0.add(1.0/8.0);
        v0.add(1e-3);
        v0.add(1.0/(8*Math.pow(10,3)));
        v0.add(1e-6);
        v0.add(1.0/(8*Math.pow(10,6)));
        v0.add(1e-9);
        v0.add(1.0/(8*Math.pow(10,9)));
        v0.add(1e-12);
        v0.add(1.0/(8*Math.pow(10,12)));
        v0.add(1e-15);
        v0.add(1.0/(8*Math.pow(10,15)));
        v0.add(1e-18);
        v0.add(1.0/(8*Math.pow(10,18)));
        v0.add(1e-21);
        v0.add(1.0/(8*Math.pow(10,21)));
        v0.add(1e-24);
        v0.add(1.0/(8*Math.pow(10,24)));
        v0.add(1e-27);
        v0.add(1.0/(8*Math.pow(10,27)));
        v0.add(1e-30);
        v0.add(1.0/(8*Math.pow(10,30)));
        values1.add(v0);

        //Bytes
        ArrayList<Double> v1=new ArrayList<>();
        v1.add(8.0);
        v1.add(1.0);
        v1.add(8*Math.pow(10,-3));
        v1.add(Math.pow(2,-10));
        v1.add(8*Math.pow(10,-6));
        v1.add(Math.pow(2,-20));
        v1.add(8*Math.pow(10,-9));
        v1.add(Math.pow(2,-30));
        v1.add(8*Math.pow(10,-12));
        v1.add(Math.pow(2,-40));
        v1.add(8*Math.pow(10,-15));
        v1.add(Math.pow(2,-50));
        v1.add(8*Math.pow(10,-18));
        v1.add(Math.pow(2,-60));
        v1.add(8*Math.pow(10,-21));
        v1.add(Math.pow(2,-70));
        v1.add(8*Math.pow(10,-24));
        v1.add(Math.pow(2,-80));
        v1.add(8*Math.pow(10,-27));
        v1.add(Math.pow(2,-90));
        v1.add(8*Math.pow(10,-30));
        v1.add(Math.pow(2,-100));
        values1.add(v1);

        //KiloBits
        ArrayList<Double> v2=new ArrayList<>();
        v2.add(Math.pow(10,3));
        v2.add(Math.pow(10,3)/8);
        v2.add(1.0);
        v2.add(1.0/8.0);
        v2.add(1e-3);
        v2.add(1.0/(8*Math.pow(10,3)));
        v2.add(1e-6);
        v2.add(1.0/(8*Math.pow(10,6)));
        v2.add(1e-9);
        v2.add(1.0/(8*Math.pow(10,9)));
        v2.add(1e-12);
        v2.add(1.0/(8*Math.pow(10,12)));
        v2.add(1e-15);
        v2.add(1.0/(8*Math.pow(10,15)));
        v2.add(1e-18);
        v2.add(1.0/(8*Math.pow(10,18)));
        v2.add(1e-21);
        v2.add(1.0/(8*Math.pow(10,21)));
        v2.add(1e-24);
        v2.add(1.0/(8*Math.pow(10,24)));
        v2.add(1e-27);
        v2.add(1.0/(8*Math.pow(10,27)));
        values1.add(v2);

        //KiloBytes
        ArrayList<Double> v3=new ArrayList<>();
        v3.add(8*Math.pow(10,3));
        v3.add(Math.pow(2,10));
        v3.add(8.0);
        v3.add(1.0);
        v3.add(8*Math.pow(10,-3));
        v3.add(Math.pow(2,-10));
        v3.add(8*Math.pow(10,-6));
        v3.add(Math.pow(2,-20));
        v3.add(8*Math.pow(10,-9));
        v3.add(Math.pow(2,-30));
        v3.add(8*Math.pow(10,-12));
        v3.add(Math.pow(2,-40));
        v3.add(8*Math.pow(10,-15));
        v3.add(Math.pow(2,-50));
        v3.add(8*Math.pow(10,-18));
        v3.add(Math.pow(2,-60));
        v3.add(8*Math.pow(10,-21));
        v3.add(Math.pow(2,-70));
        v3.add(8*Math.pow(10,-24));
        v3.add(Math.pow(2,-80));
        v3.add(8*Math.pow(10,-27));
        v3.add(Math.pow(2,-90));
        values1.add(v3);

        //MegaBits
        ArrayList<Double> v4=new ArrayList<>();
        v4.add(Math.pow(10,6));
        v4.add(Math.pow(10,6)/8);
        v4.add(Math.pow(10,3));
        v4.add(Math.pow(10,3)/8);
        v4.add(1.0);
        v4.add(1.0/8.0);
        v4.add(1e-3);
        v4.add(1.0/(8*Math.pow(10,3)));
        v4.add(1e-6);
        v4.add(1.0/(8*Math.pow(10,6)));
        v4.add(1e-9);
        v4.add(1.0/(8*Math.pow(10,9)));
        v4.add(1e-12);
        v4.add(1.0/(8*Math.pow(10,12)));
        v4.add(1e-15);
        v4.add(1.0/(8*Math.pow(10,15)));
        v4.add(1e-18);
        v4.add(1.0/(8*Math.pow(10,18)));
        v4.add(1e-21);
        v4.add(1.0/(8*Math.pow(10,21)));
        v4.add(1e-24);
        v4.add(1.0/(8*Math.pow(10,24)));
        values1.add(v4);

        //MegaBytes
        ArrayList<Double> v5=new ArrayList<>();
        v5.add(8*Math.pow(10,6));
        v5.add(Math.pow(2,20));
        v5.add(8*Math.pow(10,3));
        v5.add(Math.pow(2,10));
        v5.add(8.0);
        v5.add(1.0);
        v5.add(8*Math.pow(10,-3));
        v5.add(Math.pow(2,-10));
        v5.add(8*Math.pow(10,-6));
        v5.add(Math.pow(2,-20));
        v5.add(8*Math.pow(10,-9));
        v5.add(Math.pow(2,-30));
        v5.add(8*Math.pow(10,-12));
        v5.add(Math.pow(2,-40));
        v5.add(8*Math.pow(10,-15));
        v5.add(Math.pow(2,-50));
        v5.add(8*Math.pow(10,-18));
        v5.add(Math.pow(2,-60));
        v5.add(8*Math.pow(10,-21));
        v5.add(Math.pow(2,-70));
        v5.add(8*Math.pow(10,-24));
        v5.add(Math.pow(2,-80));
        values1.add(v5);

        //GegaBits
        ArrayList<Double> v6=new ArrayList<>();
        v6.add(Math.pow(10,9));
        v6.add(Math.pow(10,9)/8);
        v6.add(Math.pow(10,6));
        v6.add(Math.pow(10,6)/8);
        v6.add(Math.pow(10,3));
        v6.add(Math.pow(10,3)/8);
        v6.add(1.0);
        v6.add(1.0/8.0);
        v6.add(1e-3);
        v6.add(1.0/(8*Math.pow(10,3)));
        v6.add(1e-6);
        v6.add(1.0/(8*Math.pow(10,6)));
        v6.add(1e-9);
        v6.add(1.0/(8*Math.pow(10,9)));
        v6.add(1e-12);
        v6.add(1.0/(8*Math.pow(10,12)));
        v6.add(1e-15);
        v6.add(1.0/(8*Math.pow(10,15)));
        v6.add(1e-18);
        v6.add(1.0/(8*Math.pow(10,18)));
        v6.add(1e-21);
        v6.add(1.0/(8*Math.pow(10,21)));
        values1.add(v6);

        //GegaBytes
        ArrayList<Double> v7=new ArrayList<>();
        v7.add(8*Math.pow(10,9));
        v7.add(Math.pow(2,30));
        v7.add(8*Math.pow(10,6));
        v7.add(Math.pow(2,20));
        v7.add(8*Math.pow(10,3));
        v7.add(Math.pow(2,10));
        v7.add(8.0);
        v7.add(1.0);
        v7.add(8*Math.pow(10,-3));
        v7.add(Math.pow(2,-10));
        v7.add(8*Math.pow(10,-6));
        v7.add(Math.pow(2,-20));
        v7.add(8*Math.pow(10,-9));
        v7.add(Math.pow(2,-30));
        v7.add(8*Math.pow(10,-12));
        v7.add(Math.pow(2,-40));
        v7.add(8*Math.pow(10,-15));
        v7.add(Math.pow(2,-50));
        v7.add(8*Math.pow(10,-18));
        v7.add(Math.pow(2,-60));
        v7.add(8*Math.pow(10,-21));
        v7.add(Math.pow(2,-70));
        values1.add(v7);

        //TeraBits
        ArrayList<Double> v8=new ArrayList<>();
        v8.add(Math.pow(10,12));
        v8.add(Math.pow(10,12)/8);
        v8.add(Math.pow(10,9));
        v8.add(Math.pow(10,9)/8);
        v8.add(Math.pow(10,6));
        v8.add(Math.pow(10,6)/8);
        v8.add(Math.pow(10,3));
        v8.add(Math.pow(10,3)/8);
        v8.add(1.0);
        v8.add(1.0/8.0);
        v8.add(1e-3);
        v8.add(1.0/(8*Math.pow(10,3)));
        v8.add(1e-6);
        v8.add(1.0/(8*Math.pow(10,6)));
        v8.add(1e-9);
        v8.add(1.0/(8*Math.pow(10,9)));
        v8.add(1e-12);
        v8.add(1.0/(8*Math.pow(10,12)));
        v8.add(1e-15);
        v8.add(1.0/(8*Math.pow(10,15)));
        v8.add(1e-18);
        v8.add(1.0/(8*Math.pow(10,18)));
        values1.add(v8);

        //TeraBytes
        ArrayList<Double> v9=new ArrayList<>();
        v9.add(8*Math.pow(10,12));
        v9.add(Math.pow(2,40));
        v9.add(8*Math.pow(10,9));
        v9.add(Math.pow(2,30));
        v9.add(8*Math.pow(10,6));
        v9.add(Math.pow(2,20));
        v9.add(8*Math.pow(10,3));
        v9.add(Math.pow(2,10));
        v9.add(8.0);
        v9.add(1.0);
        v9.add(8*Math.pow(10,-3));
        v9.add(Math.pow(2,-10));
        v9.add(8*Math.pow(10,-6));
        v9.add(Math.pow(2,-20));
        v9.add(8*Math.pow(10,-9));
        v9.add(Math.pow(2,-30));
        v9.add(8*Math.pow(10,-12));
        v9.add(Math.pow(2,-40));
        v9.add(8*Math.pow(10,-15));
        v9.add(Math.pow(2,-50));
        v9.add(8*Math.pow(10,-18));
        v9.add(Math.pow(2,-60));
        values1.add(v9);


        //PetaBits
        ArrayList<Double> v10=new ArrayList<>();
        v10.add(Math.pow(10,15));
        v10.add(Math.pow(10,15)/8);
        v10.add(Math.pow(10,12));
        v10.add(Math.pow(10,12)/8);
        v10.add(Math.pow(10,9));
        v10.add(Math.pow(10,9)/8);
        v10.add(Math.pow(10,6));
        v10.add(Math.pow(10,6)/8);
        v10.add(Math.pow(10,3));
        v10.add(Math.pow(10,3)/8);
        v10.add(1.0);
        v10.add(1.0/8.0);
        v10.add(1e-3);
        v10.add(1.0/(8*Math.pow(10,3)));
        v10.add(1e-6);
        v10.add(1.0/(8*Math.pow(10,6)));
        v10.add(1e-9);
        v10.add(1.0/(8*Math.pow(10,9)));
        v10.add(1e-12);
        v10.add(1.0/(8*Math.pow(10,12)));
        v10.add(1e-15);
        v10.add(1.0/(8*Math.pow(10,15)));
        values1.add(v10);

        //PetaBytes
        ArrayList<Double> v11=new ArrayList<>();
        v11.add(8*Math.pow(10,15));
        v11.add(Math.pow(2,50));
        v11.add(8*Math.pow(10,12));
        v11.add(Math.pow(2,40));
        v11.add(8*Math.pow(10,9));
        v11.add(Math.pow(2,30));
        v11.add(8*Math.pow(10,6));
        v11.add(Math.pow(2,20));
        v11.add(8*Math.pow(10,3));
        v11.add(Math.pow(2,10));
        v11.add(8.0);
        v11.add(1.0);
        v11.add(8*Math.pow(10,-3));
        v11.add(Math.pow(2,-10));
        v11.add(8*Math.pow(10,-6));
        v11.add(Math.pow(2,-20));
        v11.add(8*Math.pow(10,-9));
        v11.add(Math.pow(2,-30));
        v11.add(8*Math.pow(10,-12));
        v11.add(Math.pow(2,-40));
        v11.add(8*Math.pow(10,-15));
        v11.add(Math.pow(2,-50));
        values1.add(v11);


        //ExaBits
        ArrayList<Double> v12=new ArrayList<>();
        v12.add(Math.pow(10,18));
        v12.add(Math.pow(10,18)/8);
        v12.add(Math.pow(10,15));
        v12.add(Math.pow(10,15)/8);
        v12.add(Math.pow(10,12));
        v12.add(Math.pow(10,12)/8);
        v12.add(Math.pow(10,9));
        v12.add(Math.pow(10,9)/8);
        v12.add(Math.pow(10,6));
        v12.add(Math.pow(10,6)/8);
        v12.add(Math.pow(10,3));
        v12.add(Math.pow(10,3)/8);
        v12.add(1.0);
        v12.add(1.0/8.0);
        v12.add(1e-3);
        v12.add(1.0/(8*Math.pow(10,3)));
        v12.add(1e-6);
        v12.add(1.0/(8*Math.pow(10,6)));
        v12.add(1e-9);
        v12.add(1.0/(8*Math.pow(10,9)));
        v12.add(1e-12);
        v12.add(1.0/(8*Math.pow(10,12)));
        values1.add(v12);


        //ExaBytes
        ArrayList<Double> v13=new ArrayList<>();
        v13.add(8*Math.pow(10,18));
        v13.add(Math.pow(2,60));
        v13.add(8*Math.pow(10,15));
        v13.add(Math.pow(2,50));
        v13.add(8*Math.pow(10,12));
        v13.add(Math.pow(2,40));
        v13.add(8*Math.pow(10,9));
        v13.add(Math.pow(2,30));
        v13.add(8*Math.pow(10,6));
        v13.add(Math.pow(2,20));
        v13.add(8*Math.pow(10,3));
        v13.add(Math.pow(2,10));
        v13.add(8.0);
        v13.add(1.0);
        v13.add(8*Math.pow(10,-3));
        v13.add(Math.pow(2,-10));
        v13.add(8*Math.pow(10,-6));
        v13.add(Math.pow(2,-20));
        v13.add(8*Math.pow(10,-9));
        v13.add(Math.pow(2,-30));
        v13.add(8*Math.pow(10,-12));
        v13.add(Math.pow(2,-40));
        values1.add(v13);

        //ZettaBits
        ArrayList<Double> v14=new ArrayList<>();
        v14.add(Math.pow(10,21));
        v14.add(Math.pow(10,21)/8);
        v14.add(Math.pow(10,18));
        v14.add(Math.pow(10,18)/8);
        v14.add(Math.pow(10,15));
        v14.add(Math.pow(10,15)/8);
        v14.add(Math.pow(10,12));
        v14.add(Math.pow(10,12)/8);
        v14.add(Math.pow(10,9));
        v14.add(Math.pow(10,9)/8);
        v14.add(Math.pow(10,6));
        v14.add(Math.pow(10,6)/8);
        v14.add(Math.pow(10,3));
        v14.add(Math.pow(10,3)/8);
        v14.add(1.0);
        v14.add(1.0/8.0);
        v14.add(1e-3);
        v14.add(1.0/(8*Math.pow(10,3)));
        v14.add(1e-6);
        v14.add(1.0/(8*Math.pow(10,6)));
        v14.add(1e-9);
        v14.add(1.0/(8*Math.pow(10,9)));
        values1.add(v14);


        //ZettaBytes
        ArrayList<Double> v15=new ArrayList<>();
        v15.add(8*Math.pow(10,21));
        v15.add(Math.pow(2,70));
        v15.add(8*Math.pow(10,18));
        v15.add(Math.pow(2,60));
        v15.add(8*Math.pow(10,15));
        v15.add(Math.pow(2,50));
        v15.add(8*Math.pow(10,12));
        v15.add(Math.pow(2,40));
        v15.add(8*Math.pow(10,9));
        v15.add(Math.pow(2,30));
        v15.add(8*Math.pow(10,6));
        v15.add(Math.pow(2,20));
        v15.add(8*Math.pow(10,3));
        v15.add(Math.pow(2,10));
        v15.add(8.0);
        v15.add(1.0);
        v15.add(8*Math.pow(10,-3));
        v15.add(Math.pow(2,-10));
        v15.add(8*Math.pow(10,-6));
        v15.add(Math.pow(2,-20));
        v15.add(8*Math.pow(10,-9));
        v15.add(Math.pow(2,-30));
        values1.add(v15);

        //YottaBits
        ArrayList<Double> v16=new ArrayList<>();
        v16.add(Math.pow(10,24));
        v16.add(Math.pow(10,24)/8);
        v16.add(Math.pow(10,21));
        v16.add(Math.pow(10,21)/8);
        v16.add(Math.pow(10,18));
        v16.add(Math.pow(10,18)/8);
        v16.add(Math.pow(10,15));
        v16.add(Math.pow(10,15)/8);
        v16.add(Math.pow(10,12));
        v16.add(Math.pow(10,12)/8);
        v16.add(Math.pow(10,9));
        v16.add(Math.pow(10,9)/8);
        v16.add(Math.pow(10,6));
        v16.add(Math.pow(10,6)/8);
        v16.add(Math.pow(10,3));
        v16.add(Math.pow(10,3)/8);
        v16.add(1.0);
        v16.add(1.0/8.0);
        v16.add(1e-3);
        v16.add(1.0/(8*Math.pow(10,3)));
        v16.add(1e-6);
        v16.add(1.0/(8*Math.pow(10,6)));
        values1.add(v16);


        //YottaBytes
        ArrayList<Double> v17=new ArrayList<>();
        v17.add(8*Math.pow(10,24));
        v17.add(Math.pow(2,80));
        v17.add(8*Math.pow(10,21));
        v17.add(Math.pow(2,70));
        v17.add(8*Math.pow(10,18));
        v17.add(Math.pow(2,60));
        v17.add(8*Math.pow(10,15));
        v17.add(Math.pow(2,50));
        v17.add(8*Math.pow(10,12));
        v17.add(Math.pow(2,40));
        v17.add(8*Math.pow(10,9));
        v17.add(Math.pow(2,30));
        v17.add(8*Math.pow(10,6));
        v17.add(Math.pow(2,20));
        v17.add(8*Math.pow(10,3));
        v17.add(Math.pow(2,10));
        v17.add(8.0);
        v17.add(1.0);
        v17.add(8*Math.pow(10,-3));
        v17.add(Math.pow(2,-10));
        v17.add(8*Math.pow(10,-6));
        v17.add(Math.pow(2,-20));
        values1.add(v17);

        //BrontoBits
        ArrayList<Double> v18=new ArrayList<>();
        v18.add(Math.pow(10,27));
        v18.add(Math.pow(10,27)/8);
        v18.add(Math.pow(10,24));
        v18.add(Math.pow(10,24)/8);
        v18.add(Math.pow(10,21));
        v18.add(Math.pow(10,21)/8);
        v18.add(Math.pow(10,18));
        v18.add(Math.pow(10,18)/8);
        v18.add(Math.pow(10,15));
        v18.add(Math.pow(10,15)/8);
        v18.add(Math.pow(10,12));
        v18.add(Math.pow(10,12)/8);
        v18.add(Math.pow(10,9));
        v18.add(Math.pow(10,9)/8);
        v18.add(Math.pow(10,6));
        v18.add(Math.pow(10,6)/8);
        v18.add(Math.pow(10,3));
        v18.add(Math.pow(10,3)/8);
        v18.add(1.0);
        v18.add(1.0/8.0);
        v18.add(1e-3);
        v18.add(1.0/(8*Math.pow(10,3)));
        values1.add(v18);


        //BrontoBytes
        ArrayList<Double> v19=new ArrayList<>();
        v19.add(8*Math.pow(10,27));
        v19.add(Math.pow(2,90));
        v19.add(8*Math.pow(10,24));
        v19.add(Math.pow(2,80));
        v19.add(8*Math.pow(10,21));
        v19.add(Math.pow(2,70));
        v19.add(8*Math.pow(10,18));
        v19.add(Math.pow(2,60));
        v19.add(8*Math.pow(10,15));
        v19.add(Math.pow(2,50));
        v19.add(8*Math.pow(10,12));
        v19.add(Math.pow(2,40));
        v19.add(8*Math.pow(10,9));
        v19.add(Math.pow(2,30));
        v19.add(8*Math.pow(10,6));
        v19.add(Math.pow(2,20));
        v19.add(8*Math.pow(10,3));
        v19.add(Math.pow(2,10));
        v19.add(8.0);
        v19.add(1.0);
        v19.add(8*Math.pow(10,-3));
        v19.add(Math.pow(2,-10));
        values1.add(v19);

        //GeopBits
        ArrayList<Double> v20=new ArrayList<>();
        v20.add(Math.pow(10,30));
        v20.add(Math.pow(10,30)/8);
        v20.add(Math.pow(10,27));
        v20.add(Math.pow(10,27)/8);
        v20.add(Math.pow(10,24));
        v20.add(Math.pow(10,24)/8);
        v20.add(Math.pow(10,21));
        v20.add(Math.pow(10,21)/8);
        v20.add(Math.pow(10,18));
        v20.add(Math.pow(10,18)/8);
        v20.add(Math.pow(10,15));
        v20.add(Math.pow(10,15)/8);
        v20.add(Math.pow(10,12));
        v20.add(Math.pow(10,12)/8);
        v20.add(Math.pow(10,9));
        v20.add(Math.pow(10,9)/8);
        v20.add(Math.pow(10,6));
        v20.add(Math.pow(10,6)/8);
        v20.add(Math.pow(10,3));
        v20.add(Math.pow(10,3)/8);
        v20.add(1.0);
        v20.add(1.0/8.0);
        values1.add(v20);


        //GeopBytes
        ArrayList<Double> v21=new ArrayList<>();
        v21.add(8*Math.pow(10,30));
        v21.add(Math.pow(2,100));
        v21.add(8*Math.pow(10,27));
        v21.add(Math.pow(2,90));
        v21.add(8*Math.pow(10,24));
        v21.add(Math.pow(2,80));
        v21.add(8*Math.pow(10,21));
        v21.add(Math.pow(2,70));
        v21.add(8*Math.pow(10,18));
        v21.add(Math.pow(2,60));
        v21.add(8*Math.pow(10,15));
        v21.add(Math.pow(2,50));
        v21.add(8*Math.pow(10,12));
        v21.add(Math.pow(2,40));
        v21.add(8*Math.pow(10,9));
        v21.add(Math.pow(2,30));
        v21.add(8*Math.pow(10,6));
        v21.add(Math.pow(2,20));
        v21.add(8*Math.pow(10,3));
        v21.add(Math.pow(2,10));
        v21.add(8.0);
        v21.add(1.0);
        values1.add(v21);
        return values1;
    }

    public ArrayList<CurrencyModel> getCurrency(){
        ArrayList<CurrencyModel> currList=new ArrayList<>();
        currList.add(new CurrencyModel(R.drawable.flag1,"AED - United Arab Emirates Dirham"));
        currList.add(new CurrencyModel(R.drawable.flag2,"AFN - Afghan Afghani"));
        currList.add(new CurrencyModel(R.drawable.flag3,"ALL - Albanian Lek"));
        currList.add(new CurrencyModel(R.drawable.flag4,"AMD - Armenian Dram"));
        currList.add(new CurrencyModel(R.drawable.flag5,"ANG - Netherlands Antillean Guilder"));
        currList.add(new CurrencyModel(R.drawable.flag6,"AOA - Angolan Kwanza"));
        currList.add(new CurrencyModel(R.drawable.flag7,"ARS - Argentine Peso"));
        currList.add(new CurrencyModel(R.drawable.flag8,"AUD - Australian Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag9,"AWG - Aruban Florin"));
        currList.add(new CurrencyModel(R.drawable.flag10,"AZN - Azerbaijani Manat"));
        currList.add(new CurrencyModel(R.drawable.flag11,"BAM - Bosnia-Herzegovina Convertible Mark"));
        currList.add(new CurrencyModel(R.drawable.flag12,"BBD - Barbadian Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag13,"BDT - Bangladeshi Taka"));
        currList.add(new CurrencyModel(R.drawable.flag14,"BGN - Bulgarian Lev"));
        currList.add(new CurrencyModel(R.drawable.flag15,"BHD - Bahraini Dinar"));
        currList.add(new CurrencyModel(R.drawable.flag16,"BIF - Burundian Franc"));
        currList.add(new CurrencyModel(R.drawable.flag17,"BMD - Bermudan Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag18,"BND - Brunei Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag19,"BOB - Bolivian Boliviano"));
        currList.add(new CurrencyModel(R.drawable.flag20,"BRL - Brazilian Real"));
        currList.add(new CurrencyModel(R.drawable.flag21,"BSD - Bahamian Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag22,"BTC - Bitcoin"));
        currList.add(new CurrencyModel(R.drawable.flag23,"BTN - Bhutanese Ngultrum"));
        currList.add(new CurrencyModel(R.drawable.flag24,"BWP - Botswanan Pula"));
        currList.add(new CurrencyModel(R.drawable.flag25,"BYN - Belarusian Ruble"));
        currList.add(new CurrencyModel(R.drawable.flag26,"BZD - Belize Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag27,"CAD - Canadian Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag28,"CDF - Congolese Franc"));
        currList.add(new CurrencyModel(R.drawable.flag29,"CHF - Swiss Franc"));
        currList.add(new CurrencyModel(R.drawable.flag30,"CLF - Chilean Unit of Account (UF)"));
        currList.add(new CurrencyModel(R.drawable.flag31,"CLP - Chilean Peso"));
        currList.add(new CurrencyModel(R.drawable.flag32,"CNH - Chinese Yuan (Offshore)"));
        currList.add(new CurrencyModel(R.drawable.flag33,"CNY - Chinese Yuan"));
        currList.add(new CurrencyModel(R.drawable.flag34,"COP - Colombian Peso"));
        currList.add(new CurrencyModel(R.drawable.flag35,"CRC - Costa Rican Colón"));
        currList.add(new CurrencyModel(R.drawable.flag36,"CUC - Cuban Convertible Peso"));
        currList.add(new CurrencyModel(R.drawable.flag37,"CUP - Cuban Peso"));
        currList.add(new CurrencyModel(R.drawable.flag38,"CVE - Cape Verdean Escudo"));
        currList.add(new CurrencyModel(R.drawable.flag39,"CZK - Czech Republic Koruna"));
        currList.add(new CurrencyModel(R.drawable.flag40,"DJF - Djiboutian Franc"));
        currList.add(new CurrencyModel(R.drawable.flag41,"DKK - Danish Krone"));
        currList.add(new CurrencyModel(R.drawable.flag42,"DOP - Dominican Peso"));
        currList.add(new CurrencyModel(R.drawable.flag43,"DZD - Algerian Dinar"));
        currList.add(new CurrencyModel(R.drawable.flag44,"EGP - Egyptian Pound"));
        currList.add(new CurrencyModel(R.drawable.flag45,"ERN - Eritrean Nakfa"));
        currList.add(new CurrencyModel(R.drawable.flag46,"ETB - Ethiopian Birr"));
        currList.add(new CurrencyModel(R.drawable.flag47,"EUR - Euro"));
        currList.add(new CurrencyModel(R.drawable.flag48,"FJD - Fijian Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag49,"FKP - Falkland Islands Pound"));
        currList.add(new CurrencyModel(R.drawable.flag50,"GBP - British Pound Sterling"));
        currList.add(new CurrencyModel(R.drawable.flag51,"GEL - Georgian Lari"));
        currList.add(new CurrencyModel(R.drawable.flag52,"GGP - Guernsey Pound"));
        currList.add(new CurrencyModel(R.drawable.flag53,"GHS - Ghanaian Cedi"));
        currList.add(new CurrencyModel(R.drawable.flag54,"GIP - Gibraltar Pound"));
        currList.add(new CurrencyModel(R.drawable.flag55,"GMD - Gambian Dalasi"));
        currList.add(new CurrencyModel(R.drawable.flag56,"GNF - Guinean Franc"));
        currList.add(new CurrencyModel(R.drawable.flag57,"GTQ - Guatemalan Quetzal"));
        currList.add(new CurrencyModel(R.drawable.flag58,"GYD - Guyanaese Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag59,"HKD - Hong Kong Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag60,"HNL - Honduran Lempira"));
        currList.add(new CurrencyModel(R.drawable.flag61,"HRK - Croatian Kuna"));
        currList.add(new CurrencyModel(R.drawable.flag62,"HTG - Haitian Gourde"));
        currList.add(new CurrencyModel(R.drawable.flag63,"HUF - Hungarian Forint"));
        currList.add(new CurrencyModel(R.drawable.flag64,"IDR - Indonesian Rupiah"));
        currList.add(new CurrencyModel(R.drawable.flag65,"ILS - Israeli New Sheqel"));
        currList.add(new CurrencyModel(R.drawable.flag66,"IMP - Manx pound"));
        currList.add(new CurrencyModel(R.drawable.flag67,"INR - Indian Rupee"));
        currList.add(new CurrencyModel(R.drawable.flag68,"IQD - Iraqi Dinar"));
        currList.add(new CurrencyModel(R.drawable.flag69,"IRR - Iranian Rial"));
        currList.add(new CurrencyModel(R.drawable.flag70,"ISK - Icelandic Króna"));
        currList.add(new CurrencyModel(R.drawable.flag71,"JEP - Jersey Pound"));
        currList.add(new CurrencyModel(R.drawable.flag72,"JMD - Jamaican Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag73,"JOD - Jordanian Dinar"));
        currList.add(new CurrencyModel(R.drawable.flag74,"JPY - Japanese Yen"));
        currList.add(new CurrencyModel(R.drawable.flag75,"KES - Kenyan Shilling"));
        currList.add(new CurrencyModel(R.drawable.flag76,"KGS - Kyrgystani Som"));
        currList.add(new CurrencyModel(R.drawable.flag77,"KHR - Cambodian Riel"));
        currList.add(new CurrencyModel(R.drawable.flag78,"KMF - Comorian Franc"));
        currList.add(new CurrencyModel(R.drawable.flag79,"KPW - North Korean Won"));
        currList.add(new CurrencyModel(R.drawable.flag80,"KRW - South Korean Won"));
        currList.add(new CurrencyModel(R.drawable.flag81,"KWD - Kuwaiti Dinar"));
        currList.add(new CurrencyModel(R.drawable.flag82,"KYD - Cayman Islands Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag83,"KZT - Kazakhstani Tenge"));
        currList.add(new CurrencyModel(R.drawable.flag84,"LAK - Laotian Kip"));
        currList.add(new CurrencyModel(R.drawable.flag85,"LBP - Lebanese Pound"));
        currList.add(new CurrencyModel(R.drawable.flag86,"LKR - Sri Lankan Rupee"));
        currList.add(new CurrencyModel(R.drawable.flag87,"LRD - Liberian Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag88,"LSL - Lesotho Loti"));
        currList.add(new CurrencyModel(R.drawable.flag89,"LYD - Libyan Dinar"));
        currList.add(new CurrencyModel(R.drawable.flag90,"MAD - Moroccan Dirham"));
        currList.add(new CurrencyModel(R.drawable.flag91,"MDL - Moldovan Leu"));
        currList.add(new CurrencyModel(R.drawable.flag92,"MGA - Malagasy Ariary"));
        currList.add(new CurrencyModel(R.drawable.flag93,"MKD - Macedonian Denar"));
        currList.add(new CurrencyModel(R.drawable.flag94,"MMK - Myanma Kyat"));
        currList.add(new CurrencyModel(R.drawable.flag95,"MNT - Mongolian Tugrik"));
        currList.add(new CurrencyModel(R.drawable.flag96,"MOP - Macanese Pataca"));
        currList.add(new CurrencyModel(R.drawable.flag97,"MRO - Mauritanian Ouguiya"));
        currList.add(new CurrencyModel(R.drawable.flag98,"MUR - Mauritian Rupee"));
        currList.add(new CurrencyModel(R.drawable.flag99,"MVR - Maldivian Rufiyaa"));
        currList.add(new CurrencyModel(R.drawable.flag100,"MWK - Malawian Kwacha"));
        currList.add(new CurrencyModel(R.drawable.flag101,"MXN - Mexican Peso"));
        currList.add(new CurrencyModel(R.drawable.flag102,"MYR - Malaysian Ringgit"));
        currList.add(new CurrencyModel(R.drawable.flag103,"MZN - Mozambican Metical"));
        currList.add(new CurrencyModel(R.drawable.flag104,"NAD - Namibian Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag105,"NGN - Nigerian Naira"));
        currList.add(new CurrencyModel(R.drawable.flag106,"NIO - Nicaraguan Córdoba"));
        currList.add(new CurrencyModel(R.drawable.flag107,"NOK - Norwegian Krone"));
        currList.add(new CurrencyModel(R.drawable.flag108,"NPR - Nepalese Rupee"));
        currList.add(new CurrencyModel(R.drawable.flag109,"NZD - New Zealand Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag110,"OMR - Omani Rial"));
        currList.add(new CurrencyModel(R.drawable.flag111,"PAB - Panamanian Balboa"));
        currList.add(new CurrencyModel(R.drawable.flag112,"PEN - Peruvian Nuevo Sol"));
        currList.add(new CurrencyModel(R.drawable.flag113,"PGK - Papua New Guinean Kina"));
        currList.add(new CurrencyModel(R.drawable.flag114,"PHP - Philippine Peso"));
        currList.add(new CurrencyModel(R.drawable.flag115,"PKR - Pakistani Rupee"));
        currList.add(new CurrencyModel(R.drawable.flag116,"PLN - Polish Zloty"));
        currList.add(new CurrencyModel(R.drawable.flag117,"PYG - Paraguayan Guarani"));
        currList.add(new CurrencyModel(R.drawable.flag118,"QAR - Qatari Rial"));
        currList.add(new CurrencyModel(R.drawable.flag119,"RON - Romanian Leu"));
        currList.add(new CurrencyModel(R.drawable.flag120,"RSD - Serbian Dinar"));
        currList.add(new CurrencyModel(R.drawable.flag121,"RUB - Russian Ruble"));
        currList.add(new CurrencyModel(R.drawable.flag122,"RWF - Rwandan Franc"));
        currList.add(new CurrencyModel(R.drawable.flag123,"SAR - Saudi Riyal"));
        currList.add(new CurrencyModel(R.drawable.flag124,"SBD - Solomon Islands Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag125,"SCR - Seychellois Rupee"));
        currList.add(new CurrencyModel(R.drawable.flag126,"SDG - Sudanese Pound"));
        currList.add(new CurrencyModel(R.drawable.flag127,"SEK - Swedish Krona"));
        currList.add(new CurrencyModel(R.drawable.flag128,"SGD - Singapore Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag129,"SHP - Saint Helena Pound"));
        currList.add(new CurrencyModel(R.drawable.flag130,"SLL - Sierra Leonean Leone"));
        currList.add(new CurrencyModel(R.drawable.flag131,"SOS - Somali Shilling"));
        currList.add(new CurrencyModel(R.drawable.flag132,"SRD - Surinamese Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag133,"SSP - South Sudanese Pound"));
        currList.add(new CurrencyModel(R.drawable.flag134,"STD - São Tomé and Príncipe Dobra"));
        currList.add(new CurrencyModel(R.drawable.flag135,"SVC - Salvadoran Colón"));
        currList.add(new CurrencyModel(R.drawable.flag136,"SYP - Syrian Pound"));
        currList.add(new CurrencyModel(R.drawable.flag137,"SZL - Swazi Lilangeni"));
        currList.add(new CurrencyModel(R.drawable.flag138,"THB - Thai Baht"));
        currList.add(new CurrencyModel(R.drawable.flag139,"TJS - Tajikistani Somoni"));
        currList.add(new CurrencyModel(R.drawable.flag140,"TMT - Turkmenistani Manat"));
        currList.add(new CurrencyModel(R.drawable.flag141,"TND - Tunisian Dinar"));
        currList.add(new CurrencyModel(R.drawable.flag142,"TOP - Tongan Pa'anga"));
        currList.add(new CurrencyModel(R.drawable.flag143,"TRY - Turkish Lira"));
        currList.add(new CurrencyModel(R.drawable.flag144,"TTD - Trinidad and Tobago Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag145,"TWD - New Taiwan Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag146,"TZS - Tanzanian Shilling"));
        currList.add(new CurrencyModel(R.drawable.flag147,"UAH - Ukrainian Hryvnia"));
        currList.add(new CurrencyModel(R.drawable.flag148,"UGX - Ugandan Shilling"));
        currList.add(new CurrencyModel(R.drawable.flag149,"USD - United States Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag150,"UYU - Uruguayan Peso"));
        currList.add(new CurrencyModel(R.drawable.flag151,"UZS - Uzbekistan Som"));
        currList.add(new CurrencyModel(R.drawable.flag152,"VEF - Venezuelan Bolívar Fuerte"));
        currList.add(new CurrencyModel(R.drawable.flag153,"VND - Vietnamese Dong"));
        currList.add(new CurrencyModel(R.drawable.flag154,"VUV - Vanuatu Vatu"));
        currList.add(new CurrencyModel(R.drawable.flag155,"WST - Samoan Tala"));
        currList.add(new CurrencyModel(R.drawable.flag156,"XAF - CFA Franc BEAC"));
        currList.add(new CurrencyModel(R.drawable.flag157,"XAG - Silver Ounce"));
        currList.add(new CurrencyModel(R.drawable.flag158,"XAU - Gold Ounce"));
        currList.add(new CurrencyModel(R.drawable.flag159,"XCD - East Caribbean Dollar"));
        currList.add(new CurrencyModel(R.drawable.flag160,"XDR - Special Drawing Rights"));
        currList.add(new CurrencyModel(R.drawable.flag161,"XOF - CFA Franc BCEAO"));
        currList.add(new CurrencyModel(R.drawable.flag162,"XPD - Palladium Ounce"));
        currList.add(new CurrencyModel(R.drawable.flag163,"XPF - CFP Franc"));
        currList.add(new CurrencyModel(R.drawable.flag164,"XPT - Platinum Ounce"));
        currList.add(new CurrencyModel(R.drawable.flag165,"YER - Yemeni Rial"));
        currList.add(new CurrencyModel(R.drawable.flag166,"ZAR - South African Rand"));
        currList.add(new CurrencyModel(R.drawable.flag167,"ZMW - Zambian Kwacha"));
        currList.add(new CurrencyModel(R.drawable.flag168,"ZWL - Zimbabwean Dollar"));
        return currList;
    }

    public ArrayList<CurrencyModel> getSelectedCurrency(){
        ArrayList<CurrencyModel> currSelectList=new ArrayList<>();
        currSelectList.add(new CurrencyModel(R.drawable.flag1,"AED - United Arab Emirates Dirham",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag2,"AFN - Afghan Afghani",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag3,"ALL - Albanian Lek",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag4,"AMD - Armenian Dram",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag5,"ANG - Netherlands Antillean Guilder",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag6,"AOA - Angolan Kwanza",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag7,"ARS - Argentine Peso",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag8,"AUD - Australian Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag9,"AWG - Aruban Florin",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag10,"AZN - Azerbaijani Manat",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag11,"BAM - Bosnia-Herzegovina Convertible Mark",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag12,"BBD - Barbadian Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag13,"BDT - Bangladeshi Taka",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag14,"BGN - Bulgarian Lev",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag15,"BHD - Bahraini Dinar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag16,"BIF - Burundian Franc",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag17,"BMD - Bermudan Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag18,"BND - Brunei Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag19,"BOB - Bolivian Boliviano",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag20,"BRL - Brazilian Real",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag21,"BSD - Bahamian Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag22,"BTC - Bitcoin",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag23,"BTN - Bhutanese Ngultrum",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag24,"BWP - Botswanan Pula",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag25,"BYN - Belarusian Ruble",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag26,"BZD - Belize Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag27,"CAD - Canadian Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag28,"CDF - Congolese Franc",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag29,"CHF - Swiss Franc",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag30,"CLF - Chilean Unit of Account (UF)",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag31,"CLP - Chilean Peso",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag32,"CNH - Chinese Yuan (Offshore)",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag33,"CNY - Chinese Yuan",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag34,"COP - Colombian Peso",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag35,"CRC - Costa Rican ColÃ³n",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag36,"CUC - Cuban Convertible Peso",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag37,"CUP - Cuban Peso",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag38,"CVE - Cape Verdean Escudo",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag39,"CZK - Czech Republic Koruna",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag40,"DJF - Djiboutian Franc",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag41,"DKK - Danish Krone",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag42,"DOP - Dominican Peso",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag43,"DZD - Algerian Dinar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag44,"EGP - Egyptian Pound",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag45,"ERN - Eritrean Nakfa",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag46,"ETB - Ethiopian Birr",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag47,"EUR - Euro",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag48,"FJD - Fijian Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag49,"FKP - Falkland Islands Pound",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag50,"GBP - British Pound Sterling",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag51,"GEL - Georgian Lari",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag52,"GGP - Guernsey Pound",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag53,"GHS - Ghanaian Cedi",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag54,"GIP - Gibraltar Pound",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag55,"GMD - Gambian Dalasi",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag56,"GNF - Guinean Franc",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag57,"GTQ - Guatemalan Quetzal",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag58,"GYD - Guyanaese Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag59,"HKD - Hong Kong Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag60,"HNL - Honduran Lempira",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag61,"HRK - Croatian Kuna",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag62,"HTG - Haitian Gourde",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag63,"HUF - Hungarian Forint",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag64,"IDR - Indonesian Rupiah",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag65,"ILS - Israeli New Sheqel",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag66,"IMP - Manx pound",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag67,"INR - Indian Rupee",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag68,"IQD - Iraqi Dinar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag69,"IRR - Iranian Rial",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag70,"ISK - Icelandic KrÃ³na",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag71,"JEP - Jersey Pound",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag72,"JMD - Jamaican Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag73,"JOD - Jordanian Dinar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag74,"JPY - Japanese Yen",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag75,"KES - Kenyan Shilling",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag76,"KGS - Kyrgystani Som",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag77,"KHR - Cambodian Riel",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag78,"KMF - Comorian Franc",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag79,"KPW - North Korean Won",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag80,"KRW - South Korean Won",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag81,"KWD - Kuwaiti Dinar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag82,"KYD - Cayman Islands Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag83,"KZT - Kazakhstani Tenge",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag84,"LAK - Laotian Kip",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag85,"LBP - Lebanese Pound",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag86,"LKR - Sri Lankan Rupee",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag87,"LRD - Liberian Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag88,"LSL - Lesotho Loti",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag89,"LYD - Libyan Dinar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag90,"MAD - Moroccan Dirham",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag91,"MDL - Moldovan Leu",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag92,"MGA - Malagasy Ariary",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag93,"MKD - Macedonian Denar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag94,"MMK - Myanma Kyat",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag95,"MNT - Mongolian Tugrik",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag96,"MOP - Macanese Pataca",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag97,"MRO - Mauritanian Ouguiya",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag98,"MUR - Mauritian Rupee",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag99,"MVR - Maldivian Rufiyaa",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag100,"MWK - Malawian Kwacha",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag101,"MXN - Mexican Peso",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag102,"MYR - Malaysian Ringgit",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag103,"MZN - Mozambican Metical",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag104,"NAD - Namibian Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag105,"NGN - Nigerian Naira",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag106,"NIO - Nicaraguan CÃ³rdoba",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag107,"NOK - Norwegian Krone",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag108,"NPR - Nepalese Rupee",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag109,"NZD - New Zealand Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag110,"OMR - Omani Rial",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag111,"PAB - Panamanian Balboa",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag112,"PEN - Peruvian Nuevo Sol",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag113,"PGK - Papua New Guinean Kina",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag114,"PHP - Philippine Peso",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag115,"PKR - Pakistani Rupee",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag116,"PLN - Polish Zloty",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag117,"PYG - Paraguayan Guarani",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag118,"QAR - Qatari Rial",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag119,"RON - Romanian Leu",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag120,"RSD - Serbian Dinar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag121,"RUB - Russian Ruble",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag122,"RWF - Rwandan Franc",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag123,"SAR - Saudi Riyal",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag124,"SBD - Solomon Islands Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag125,"SCR - Seychellois Rupee",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag126,"SDG - Sudanese Pound",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag127,"SEK - Swedish Krona",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag128,"SGD - Singapore Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag129,"SHP - Saint Helena Pound",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag130,"SLL - Sierra Leonean Leone",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag131,"SOS - Somali Shilling",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag132,"SRD - Surinamese Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag133,"SSP - South Sudanese Pound",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag134,"STD - SÃ£o TomÃ© and PrÃ­ncipe Dobra",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag135,"SVC - Salvadoran ColÃ³n",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag136,"SYP - Syrian Pound",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag137,"SZL - Swazi Lilangeni",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag138,"THB - Thai Baht",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag139,"TJS - Tajikistani Somoni",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag140,"TMT - Turkmenistani Manat",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag141,"TND - Tunisian Dinar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag142,"TOP - Tongan Pa'anga",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag143,"TRY - Turkish Lira",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag144,"TTD - Trinidad and Tobago Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag145,"TWD - New Taiwan Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag146,"TZS - Tanzanian Shilling",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag147,"UAH - Ukrainian Hryvnia",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag148,"UGX - Ugandan Shilling",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag149,"USD - United States Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag150,"UYU - Uruguayan Peso",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag151,"UZS - Uzbekistan Som",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag152,"VEF - Venezuelan BolÃ­var Fuerte",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag153,"VND - Vietnamese Dong",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag154,"VUV - Vanuatu Vatu",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag155,"WST - Samoan Tala",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag156,"XAF - CFA Franc BEAC",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag157,"XAG - Silver Ounce",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag158,"XAU - Gold Ounce",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag159,"XCD - East Caribbean Dollar",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag160,"XDR - Special Drawing Rights",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag161,"XOF - CFA Franc BCEAO",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag162,"XPD - Palladium Ounce",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag163,"XPF - CFP Franc",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag164,"XPT - Platinum Ounce",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag165,"YER - Yemeni Rial",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag166,"ZAR - South African Rand",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag167,"ZMW - Zambian Kwacha",false));
        currSelectList.add(new CurrencyModel(R.drawable.flag168,"ZWL - Zimbabwean Dollar",false));
        return currSelectList;
    }

    //frequency list
    public ArrayList<ArrayList<ValueObject>> createFreqList(){

//Hertz
        ArrayList<ValueObject> v0=new ArrayList<>();
        v0.add(new ValueObject(1.0,1.0));
        v0.add(new ValueObject(1.0,0.001));
        v0.add(new ValueObject(1.0,1e-6));
        v0.add(new ValueObject(1.0,1e-9));
        values.add(v0);
//Kilohertz
        ArrayList<ValueObject> v1=new ArrayList<>();
        v1.add(new ValueObject(1.0,1000.0));
        v1.add(new ValueObject(1.0,1.0));
        v1.add(new ValueObject(1.0,0.001));
        v1.add(new ValueObject(1.0,1e-6));
        values.add(v1);
//Megahertz
        ArrayList<ValueObject> v2=new ArrayList<>();
        v2.add(new ValueObject(1.0,1e+6));
        v2.add(new ValueObject(1.0,1000.0));
        v2.add(new ValueObject(1.0,1.0));
        v2.add(new ValueObject(1.0,0.001));
        values.add(v2);
//Gigahertz
        ArrayList<ValueObject> v3=new ArrayList<>();
        v3.add(new ValueObject(1.0,1e+9));
        v3.add(new ValueObject(1.0,1e+6));
        v3.add(new ValueObject(1.0,1000.0));
        v3.add(new ValueObject(1.0,1.0));
        values.add(v3);
        return values;
    }

    //Data Transfer Rate
    public ArrayList<ArrayList<Double>> createDataTransList() {

        //Bits
        ArrayList<Double> v0=new ArrayList<>();
        v0.add(1.0);
        v0.add(1.0/8.0);
        v0.add(1e-3);
        v0.add(1.0/(8*Math.pow(10,3)));
        v0.add(1e-6);
        v0.add(1.0/(8*Math.pow(10,6)));
        v0.add(1e-9);
        v0.add(1.0/(8*Math.pow(10,9)));
        v0.add(1e-12);
        v0.add(1.0/(8*Math.pow(10,12)));
        v0.add(1e-15);
        v0.add(1.0/(8*Math.pow(10,15)));
        v0.add(1e-18);
        v0.add(1.0/(8*Math.pow(10,18)));
        v0.add(1e-21);
        v0.add(1.0/(8*Math.pow(10,21)));
        v0.add(1e-24);
        v0.add(1.0/(8*Math.pow(10,24)));
        v0.add(1e-27);
        v0.add(1.0/(8*Math.pow(10,27)));
        v0.add(1e-30);
        v0.add(1.0/(8*Math.pow(10,30)));
        values1.add(v0);

        //Bytes
        ArrayList<Double> v1=new ArrayList<>();
        v1.add(8.0);
        v1.add(1.0);
        v1.add(8*Math.pow(10,-3));
        v1.add(Math.pow(2,-10));
        v1.add(8*Math.pow(10,-6));
        v1.add(Math.pow(2,-20));
        v1.add(8*Math.pow(10,-9));
        v1.add(Math.pow(2,-30));
        v1.add(8*Math.pow(10,-12));
        v1.add(Math.pow(2,-40));
        v1.add(8*Math.pow(10,-15));
        v1.add(Math.pow(2,-50));
        v1.add(8*Math.pow(10,-18));
        v1.add(Math.pow(2,-60));
        v1.add(8*Math.pow(10,-21));
        v1.add(Math.pow(2,-70));
        v1.add(8*Math.pow(10,-24));
        v1.add(Math.pow(2,-80));
        v1.add(8*Math.pow(10,-27));
        v1.add(Math.pow(2,-90));
        v1.add(8*Math.pow(10,-30));
        v1.add(Math.pow(2,-100));
        values1.add(v1);

        //KiloBits
        ArrayList<Double> v2=new ArrayList<>();
        v2.add(Math.pow(10,3));
        v2.add(Math.pow(10,3)/8);
        v2.add(1.0);
        v2.add(1.0/8.0);
        v2.add(1e-3);
        v2.add(1.0/(8*Math.pow(10,3)));
        v2.add(1e-6);
        v2.add(1.0/(8*Math.pow(10,6)));
        v2.add(1e-9);
        v2.add(1.0/(8*Math.pow(10,9)));
        v2.add(1e-12);
        v2.add(1.0/(8*Math.pow(10,12)));
        v2.add(1e-15);
        v2.add(1.0/(8*Math.pow(10,15)));
        v2.add(1e-18);
        v2.add(1.0/(8*Math.pow(10,18)));
        v2.add(1e-21);
        v2.add(1.0/(8*Math.pow(10,21)));
        v2.add(1e-24);
        v2.add(1.0/(8*Math.pow(10,24)));
        v2.add(1e-27);
        v2.add(1.0/(8*Math.pow(10,27)));
        values1.add(v2);

        //KiloBytes
        ArrayList<Double> v3=new ArrayList<>();
        v3.add(8*Math.pow(10,3));
        v3.add(Math.pow(2,10));
        v3.add(8.0);
        v3.add(1.0);
        v3.add(8*Math.pow(10,-3));
        v3.add(Math.pow(2,-10));
        v3.add(8*Math.pow(10,-6));
        v3.add(Math.pow(2,-20));
        v3.add(8*Math.pow(10,-9));
        v3.add(Math.pow(2,-30));
        v3.add(8*Math.pow(10,-12));
        v3.add(Math.pow(2,-40));
        v3.add(8*Math.pow(10,-15));
        v3.add(Math.pow(2,-50));
        v3.add(8*Math.pow(10,-18));
        v3.add(Math.pow(2,-60));
        v3.add(8*Math.pow(10,-21));
        v3.add(Math.pow(2,-70));
        v3.add(8*Math.pow(10,-24));
        v3.add(Math.pow(2,-80));
        v3.add(8*Math.pow(10,-27));
        v3.add(Math.pow(2,-90));
        values1.add(v3);

        //MegaBits
        ArrayList<Double> v4=new ArrayList<>();
        v4.add(Math.pow(10,6));
        v4.add(Math.pow(10,6)/8);
        v4.add(Math.pow(10,3));
        v4.add(Math.pow(10,3)/8);
        v4.add(1.0);
        v4.add(1.0/8.0);
        v4.add(1e-3);
        v4.add(1.0/(8*Math.pow(10,3)));
        v4.add(1e-6);
        v4.add(1.0/(8*Math.pow(10,6)));
        v4.add(1e-9);
        v4.add(1.0/(8*Math.pow(10,9)));
        v4.add(1e-12);
        v4.add(1.0/(8*Math.pow(10,12)));
        v4.add(1e-15);
        v4.add(1.0/(8*Math.pow(10,15)));
        v4.add(1e-18);
        v4.add(1.0/(8*Math.pow(10,18)));
        v4.add(1e-21);
        v4.add(1.0/(8*Math.pow(10,21)));
        v4.add(1e-24);
        v4.add(1.0/(8*Math.pow(10,24)));
        values1.add(v4);

        //MegaBytes
        ArrayList<Double> v5=new ArrayList<>();
        v5.add(8*Math.pow(10,6));
        v5.add(Math.pow(2,20));
        v5.add(8*Math.pow(10,3));
        v5.add(Math.pow(2,10));
        v5.add(8.0);
        v5.add(1.0);
        v5.add(8*Math.pow(10,-3));
        v5.add(Math.pow(2,-10));
        v5.add(8*Math.pow(10,-6));
        v5.add(Math.pow(2,-20));
        v5.add(8*Math.pow(10,-9));
        v5.add(Math.pow(2,-30));
        v5.add(8*Math.pow(10,-12));
        v5.add(Math.pow(2,-40));
        v5.add(8*Math.pow(10,-15));
        v5.add(Math.pow(2,-50));
        v5.add(8*Math.pow(10,-18));
        v5.add(Math.pow(2,-60));
        v5.add(8*Math.pow(10,-21));
        v5.add(Math.pow(2,-70));
        v5.add(8*Math.pow(10,-24));
        v5.add(Math.pow(2,-80));
        values1.add(v5);

        //GegaBits
        ArrayList<Double> v6=new ArrayList<>();
        v6.add(Math.pow(10,9));
        v6.add(Math.pow(10,9)/8);
        v6.add(Math.pow(10,6));
        v6.add(Math.pow(10,6)/8);
        v6.add(Math.pow(10,3));
        v6.add(Math.pow(10,3)/8);
        v6.add(1.0);
        v6.add(1.0/8.0);
        v6.add(1e-3);
        v6.add(1.0/(8*Math.pow(10,3)));
        v6.add(1e-6);
        v6.add(1.0/(8*Math.pow(10,6)));
        v6.add(1e-9);
        v6.add(1.0/(8*Math.pow(10,9)));
        v6.add(1e-12);
        v6.add(1.0/(8*Math.pow(10,12)));
        v6.add(1e-15);
        v6.add(1.0/(8*Math.pow(10,15)));
        v6.add(1e-18);
        v6.add(1.0/(8*Math.pow(10,18)));
        v6.add(1e-21);
        v6.add(1.0/(8*Math.pow(10,21)));
        values1.add(v6);

        //GegaBytes
        ArrayList<Double> v7=new ArrayList<>();
        v7.add(8*Math.pow(10,9));
        v7.add(Math.pow(2,30));
        v7.add(8*Math.pow(10,6));
        v7.add(Math.pow(2,20));
        v7.add(8*Math.pow(10,3));
        v7.add(Math.pow(2,10));
        v7.add(8.0);
        v7.add(1.0);
        v7.add(8*Math.pow(10,-3));
        v7.add(Math.pow(2,-10));
        v7.add(8*Math.pow(10,-6));
        v7.add(Math.pow(2,-20));
        v7.add(8*Math.pow(10,-9));
        v7.add(Math.pow(2,-30));
        v7.add(8*Math.pow(10,-12));
        v7.add(Math.pow(2,-40));
        v7.add(8*Math.pow(10,-15));
        v7.add(Math.pow(2,-50));
        v7.add(8*Math.pow(10,-18));
        v7.add(Math.pow(2,-60));
        v7.add(8*Math.pow(10,-21));
        v7.add(Math.pow(2,-70));
        values1.add(v7);

        //TeraBits
        ArrayList<Double> v8=new ArrayList<>();
        v8.add(Math.pow(10,12));
        v8.add(Math.pow(10,12)/8);
        v8.add(Math.pow(10,9));
        v8.add(Math.pow(10,9)/8);
        v8.add(Math.pow(10,6));
        v8.add(Math.pow(10,6)/8);
        v8.add(Math.pow(10,3));
        v8.add(Math.pow(10,3)/8);
        v8.add(1.0);
        v8.add(1.0/8.0);
        v8.add(1e-3);
        v8.add(1.0/(8*Math.pow(10,3)));
        v8.add(1e-6);
        v8.add(1.0/(8*Math.pow(10,6)));
        v8.add(1e-9);
        v8.add(1.0/(8*Math.pow(10,9)));
        v8.add(1e-12);
        v8.add(1.0/(8*Math.pow(10,12)));
        v8.add(1e-15);
        v8.add(1.0/(8*Math.pow(10,15)));
        v8.add(1e-18);
        v8.add(1.0/(8*Math.pow(10,18)));
        values1.add(v8);

        //TeraBytes
        ArrayList<Double> v9=new ArrayList<>();
        v9.add(8*Math.pow(10,12));
        v9.add(Math.pow(2,40));
        v9.add(8*Math.pow(10,9));
        v9.add(Math.pow(2,30));
        v9.add(8*Math.pow(10,6));
        v9.add(Math.pow(2,20));
        v9.add(8*Math.pow(10,3));
        v9.add(Math.pow(2,10));
        v9.add(8.0);
        v9.add(1.0);
        v9.add(8*Math.pow(10,-3));
        v9.add(Math.pow(2,-10));
        v9.add(8*Math.pow(10,-6));
        v9.add(Math.pow(2,-20));
        v9.add(8*Math.pow(10,-9));
        v9.add(Math.pow(2,-30));
        v9.add(8*Math.pow(10,-12));
        v9.add(Math.pow(2,-40));
        v9.add(8*Math.pow(10,-15));
        v9.add(Math.pow(2,-50));
        v9.add(8*Math.pow(10,-18));
        v9.add(Math.pow(2,-60));
        values1.add(v9);


        //PetaBits
        ArrayList<Double> v10=new ArrayList<>();
        v10.add(Math.pow(10,15));
        v10.add(Math.pow(10,15)/8);
        v10.add(Math.pow(10,12));
        v10.add(Math.pow(10,12)/8);
        v10.add(Math.pow(10,9));
        v10.add(Math.pow(10,9)/8);
        v10.add(Math.pow(10,6));
        v10.add(Math.pow(10,6)/8);
        v10.add(Math.pow(10,3));
        v10.add(Math.pow(10,3)/8);
        v10.add(1.0);
        v10.add(1.0/8.0);
        v10.add(1e-3);
        v10.add(1.0/(8*Math.pow(10,3)));
        v10.add(1e-6);
        v10.add(1.0/(8*Math.pow(10,6)));
        v10.add(1e-9);
        v10.add(1.0/(8*Math.pow(10,9)));
        v10.add(1e-12);
        v10.add(1.0/(8*Math.pow(10,12)));
        v10.add(1e-15);
        v10.add(1.0/(8*Math.pow(10,15)));
        values1.add(v10);

        //PetaBytes
        ArrayList<Double> v11=new ArrayList<>();
        v11.add(8*Math.pow(10,15));
        v11.add(Math.pow(2,50));
        v11.add(8*Math.pow(10,12));
        v11.add(Math.pow(2,40));
        v11.add(8*Math.pow(10,9));
        v11.add(Math.pow(2,30));
        v11.add(8*Math.pow(10,6));
        v11.add(Math.pow(2,20));
        v11.add(8*Math.pow(10,3));
        v11.add(Math.pow(2,10));
        v11.add(8.0);
        v11.add(1.0);
        v11.add(8*Math.pow(10,-3));
        v11.add(Math.pow(2,-10));
        v11.add(8*Math.pow(10,-6));
        v11.add(Math.pow(2,-20));
        v11.add(8*Math.pow(10,-9));
        v11.add(Math.pow(2,-30));
        v11.add(8*Math.pow(10,-12));
        v11.add(Math.pow(2,-40));
        v11.add(8*Math.pow(10,-15));
        v11.add(Math.pow(2,-50));
        values1.add(v11);


        //ExaBits
        ArrayList<Double> v12=new ArrayList<>();
        v12.add(Math.pow(10,18));
        v12.add(Math.pow(10,18)/8);
        v12.add(Math.pow(10,15));
        v12.add(Math.pow(10,15)/8);
        v12.add(Math.pow(10,12));
        v12.add(Math.pow(10,12)/8);
        v12.add(Math.pow(10,9));
        v12.add(Math.pow(10,9)/8);
        v12.add(Math.pow(10,6));
        v12.add(Math.pow(10,6)/8);
        v12.add(Math.pow(10,3));
        v12.add(Math.pow(10,3)/8);
        v12.add(1.0);
        v12.add(1.0/8.0);
        v12.add(1e-3);
        v12.add(1.0/(8*Math.pow(10,3)));
        v12.add(1e-6);
        v12.add(1.0/(8*Math.pow(10,6)));
        v12.add(1e-9);
        v12.add(1.0/(8*Math.pow(10,9)));
        v12.add(1e-12);
        v12.add(1.0/(8*Math.pow(10,12)));
        values1.add(v12);


        //ExaBytes
        ArrayList<Double> v13=new ArrayList<>();
        v13.add(8*Math.pow(10,18));
        v13.add(Math.pow(2,60));
        v13.add(8*Math.pow(10,15));
        v13.add(Math.pow(2,50));
        v13.add(8*Math.pow(10,12));
        v13.add(Math.pow(2,40));
        v13.add(8*Math.pow(10,9));
        v13.add(Math.pow(2,30));
        v13.add(8*Math.pow(10,6));
        v13.add(Math.pow(2,20));
        v13.add(8*Math.pow(10,3));
        v13.add(Math.pow(2,10));
        v13.add(8.0);
        v13.add(1.0);
        v13.add(8*Math.pow(10,-3));
        v13.add(Math.pow(2,-10));
        v13.add(8*Math.pow(10,-6));
        v13.add(Math.pow(2,-20));
        v13.add(8*Math.pow(10,-9));
        v13.add(Math.pow(2,-30));
        v13.add(8*Math.pow(10,-12));
        v13.add(Math.pow(2,-40));
        values1.add(v13);

        //ZettaBits
        ArrayList<Double> v14=new ArrayList<>();
        v14.add(Math.pow(10,21));
        v14.add(Math.pow(10,21)/8);
        v14.add(Math.pow(10,18));
        v14.add(Math.pow(10,18)/8);
        v14.add(Math.pow(10,15));
        v14.add(Math.pow(10,15)/8);
        v14.add(Math.pow(10,12));
        v14.add(Math.pow(10,12)/8);
        v14.add(Math.pow(10,9));
        v14.add(Math.pow(10,9)/8);
        v14.add(Math.pow(10,6));
        v14.add(Math.pow(10,6)/8);
        v14.add(Math.pow(10,3));
        v14.add(Math.pow(10,3)/8);
        v14.add(1.0);
        v14.add(1.0/8.0);
        v14.add(1e-3);
        v14.add(1.0/(8*Math.pow(10,3)));
        v14.add(1e-6);
        v14.add(1.0/(8*Math.pow(10,6)));
        v14.add(1e-9);
        v14.add(1.0/(8*Math.pow(10,9)));
        values1.add(v14);


        //ZettaBytes
        ArrayList<Double> v15=new ArrayList<>();
        v15.add(8*Math.pow(10,21));
        v15.add(Math.pow(2,70));
        v15.add(8*Math.pow(10,18));
        v15.add(Math.pow(2,60));
        v15.add(8*Math.pow(10,15));
        v15.add(Math.pow(2,50));
        v15.add(8*Math.pow(10,12));
        v15.add(Math.pow(2,40));
        v15.add(8*Math.pow(10,9));
        v15.add(Math.pow(2,30));
        v15.add(8*Math.pow(10,6));
        v15.add(Math.pow(2,20));
        v15.add(8*Math.pow(10,3));
        v15.add(Math.pow(2,10));
        v15.add(8.0);
        v15.add(1.0);
        v15.add(8*Math.pow(10,-3));
        v15.add(Math.pow(2,-10));
        v15.add(8*Math.pow(10,-6));
        v15.add(Math.pow(2,-20));
        v15.add(8*Math.pow(10,-9));
        v15.add(Math.pow(2,-30));
        values1.add(v15);

        //YottaBits
        ArrayList<Double> v16=new ArrayList<>();
        v16.add(Math.pow(10,24));
        v16.add(Math.pow(10,24)/8);
        v16.add(Math.pow(10,21));
        v16.add(Math.pow(10,21)/8);
        v16.add(Math.pow(10,18));
        v16.add(Math.pow(10,18)/8);
        v16.add(Math.pow(10,15));
        v16.add(Math.pow(10,15)/8);
        v16.add(Math.pow(10,12));
        v16.add(Math.pow(10,12)/8);
        v16.add(Math.pow(10,9));
        v16.add(Math.pow(10,9)/8);
        v16.add(Math.pow(10,6));
        v16.add(Math.pow(10,6)/8);
        v16.add(Math.pow(10,3));
        v16.add(Math.pow(10,3)/8);
        v16.add(1.0);
        v16.add(1.0/8.0);
        v16.add(1e-3);
        v16.add(1.0/(8*Math.pow(10,3)));
        v16.add(1e-6);
        v16.add(1.0/(8*Math.pow(10,6)));
        values1.add(v16);


        //YottaBytes
        ArrayList<Double> v17=new ArrayList<>();
        v17.add(8*Math.pow(10,24));
        v17.add(Math.pow(2,80));
        v17.add(8*Math.pow(10,21));
        v17.add(Math.pow(2,70));
        v17.add(8*Math.pow(10,18));
        v17.add(Math.pow(2,60));
        v17.add(8*Math.pow(10,15));
        v17.add(Math.pow(2,50));
        v17.add(8*Math.pow(10,12));
        v17.add(Math.pow(2,40));
        v17.add(8*Math.pow(10,9));
        v17.add(Math.pow(2,30));
        v17.add(8*Math.pow(10,6));
        v17.add(Math.pow(2,20));
        v17.add(8*Math.pow(10,3));
        v17.add(Math.pow(2,10));
        v17.add(8.0);
        v17.add(1.0);
        v17.add(8*Math.pow(10,-3));
        v17.add(Math.pow(2,-10));
        v17.add(8*Math.pow(10,-6));
        v17.add(Math.pow(2,-20));
        values1.add(v17);

        //BrontoBits
        ArrayList<Double> v18=new ArrayList<>();
        v18.add(Math.pow(10,27));
        v18.add(Math.pow(10,27)/8);
        v18.add(Math.pow(10,24));
        v18.add(Math.pow(10,24)/8);
        v18.add(Math.pow(10,21));
        v18.add(Math.pow(10,21)/8);
        v18.add(Math.pow(10,18));
        v18.add(Math.pow(10,18)/8);
        v18.add(Math.pow(10,15));
        v18.add(Math.pow(10,15)/8);
        v18.add(Math.pow(10,12));
        v18.add(Math.pow(10,12)/8);
        v18.add(Math.pow(10,9));
        v18.add(Math.pow(10,9)/8);
        v18.add(Math.pow(10,6));
        v18.add(Math.pow(10,6)/8);
        v18.add(Math.pow(10,3));
        v18.add(Math.pow(10,3)/8);
        v18.add(1.0);
        v18.add(1.0/8.0);
        v18.add(1e-3);
        v18.add(1.0/(8*Math.pow(10,3)));
        values1.add(v18);


        //BrontoBytes
        ArrayList<Double> v19=new ArrayList<>();
        v19.add(8*Math.pow(10,27));
        v19.add(Math.pow(2,90));
        v19.add(8*Math.pow(10,24));
        v19.add(Math.pow(2,80));
        v19.add(8*Math.pow(10,21));
        v19.add(Math.pow(2,70));
        v19.add(8*Math.pow(10,18));
        v19.add(Math.pow(2,60));
        v19.add(8*Math.pow(10,15));
        v19.add(Math.pow(2,50));
        v19.add(8*Math.pow(10,12));
        v19.add(Math.pow(2,40));
        v19.add(8*Math.pow(10,9));
        v19.add(Math.pow(2,30));
        v19.add(8*Math.pow(10,6));
        v19.add(Math.pow(2,20));
        v19.add(8*Math.pow(10,3));
        v19.add(Math.pow(2,10));
        v19.add(8.0);
        v19.add(1.0);
        v19.add(8*Math.pow(10,-3));
        v19.add(Math.pow(2,-10));
        values1.add(v19);

        //GeopBits
        ArrayList<Double> v20=new ArrayList<>();
        v20.add(Math.pow(10,30));
        v20.add(Math.pow(10,30)/8);
        v20.add(Math.pow(10,27));
        v20.add(Math.pow(10,27)/8);
        v20.add(Math.pow(10,24));
        v20.add(Math.pow(10,24)/8);
        v20.add(Math.pow(10,21));
        v20.add(Math.pow(10,21)/8);
        v20.add(Math.pow(10,18));
        v20.add(Math.pow(10,18)/8);
        v20.add(Math.pow(10,15));
        v20.add(Math.pow(10,15)/8);
        v20.add(Math.pow(10,12));
        v20.add(Math.pow(10,12)/8);
        v20.add(Math.pow(10,9));
        v20.add(Math.pow(10,9)/8);
        v20.add(Math.pow(10,6));
        v20.add(Math.pow(10,6)/8);
        v20.add(Math.pow(10,3));
        v20.add(Math.pow(10,3)/8);
        v20.add(1.0);
        v20.add(1.0/8.0);
        values1.add(v20);


        //GeopBytes
        ArrayList<Double> v21=new ArrayList<>();
        v21.add(8*Math.pow(10,30));
        v21.add(Math.pow(2,100));
        v21.add(8*Math.pow(10,27));
        v21.add(Math.pow(2,90));
        v21.add(8*Math.pow(10,24));
        v21.add(Math.pow(2,80));
        v21.add(8*Math.pow(10,21));
        v21.add(Math.pow(2,70));
        v21.add(8*Math.pow(10,18));
        v21.add(Math.pow(2,60));
        v21.add(8*Math.pow(10,15));
        v21.add(Math.pow(2,50));
        v21.add(8*Math.pow(10,12));
        v21.add(Math.pow(2,40));
        v21.add(8*Math.pow(10,9));
        v21.add(Math.pow(2,30));
        v21.add(8*Math.pow(10,6));
        v21.add(Math.pow(2,20));
        v21.add(8*Math.pow(10,3));
        v21.add(Math.pow(2,10));
        v21.add(8.0);
        v21.add(1.0);
        values1.add(v21);
        return values1;
    }
}
